[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/debug.js",
    "content": "module.exports = function debug(str) {\n  if (process.env.DEBUG) {\n    console.error(str);\n  }\n};\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/debug.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "exports",
    "memberof": "lib/debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/debug.js~exports",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/debug.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "lib/inspector.js",
    "content": "var util         = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar fs           = require('fs');\nvar parse        = require('./parser').parse;\nvar Match        = require('./match');\nvar NodeUtils    = require('./nodeUtils');\nvar crypto       = require('crypto');\nvar stable       = require('stable');\n\n/**\n *\n */\nclass Inspector extends EventEmitter {\n  /**\n   * Creates a new Inspector, which extends EventEmitter. filePaths is expected\n   * to be an array of string paths. Also accepts an options object with any\n   * combination of the following: threshold, identifiers literals, and\n   * minInstances. Threshold indicates the minimum number of nodes to analyze.\n   * Identifiers indicates whether or not the nodes in a match should also have\n   * matching identifiers, and literals whether or not literal values should\n   * match. minInstances specifies the min number of instances for a match.\n   * An instance of Inspector emits the following events: start, match and end.\n   *\n   * @constructor\n   * @extends EventEmitter\n   *\n   * @param {string[]} filePaths The files on which to run the inspector\n   * @param {object}   [opts]    Options to set for the inspector\n   */\n  constructor(filePaths, opts) {\n    super();\n    opts = opts || {};\n\n    this._filePaths    = filePaths || [];\n    this._threshold    = opts.threshold || 30;\n    this._identifiers  = opts.identifiers;\n    this._literals     = opts.literals;\n    this._minInstances = opts.minInstances || 2;\n    this._map          = Object.create(null);\n    this._fileContents = {};\n    this._traversals   = {};\n    this.numFiles      = this._filePaths.length;\n  }\n\n  /**\n   * Runs the inspector on the given file paths, as provided in the constructor.\n   * Emits a start event, followed by a series of match events for any detected\n   * similarities, and an end event on completion.\n   *\n   * @fires Inspector#start\n   * @fires Inspector#match\n   * @fires Inspector#end\n   */\n  run() {\n    this.emit('start');\n\n    // File contents are split to allow for specific line extraction\n    this._filePaths.forEach((filePath) => {\n      var src = fs.readFileSync(filePath, {encoding: 'utf8'});\n      this._fileContents[filePath] = src.split('\\n');\n      try {\n        var syntaxTree = parse(src, filePath);\n      } catch (err) {\n        return console.error(err.message);\n      }\n      this._traversals[filePath] = NodeUtils.getDFSTraversal(syntaxTree);\n      this._walk(syntaxTree, (nodes) => this._insert(nodes));\n    });\n\n    this._analyze();\n    this.emit('end');\n  }\n\n  /**\n   * Walks a given node's AST, building up arrays of nodes that meet the\n   * inspector's threshold. When found, the callback is invoked and passed\n   * the array of nodes.\n   *\n   * @private\n   *\n   * @param {Node}     node The node to traverse\n   * @param {function} fn   The callback to invoke\n   */\n  _walk(node, fn) {\n    NodeUtils.walkSubtrees(node, (node, parent, ancestors) => {\n      var state = ancestors.concat(node);\n      if (NodeUtils.isAMD(state) ||\n          NodeUtils.isCommonJS(state) ||\n          NodeUtils.isES6ModuleImport(state) ||\n          NodeUtils.isES6ClassBoilerplate(state)) {\n        return;\n      }\n\n      var nodes = NodeUtils.getDFSTraversal(node, this._threshold);\n      if (nodes.length === this._threshold) {\n        fn(nodes);\n      }\n\n      // TODO: Revisit logic\n      // Disabled for performance reasons\n      // this._walkSiblings(node, fn);\n    });\n  }\n\n  /**\n   * Walks sibling nodes under a parent, grouping their DFS traversals, and\n   * invoking the callback for those that wouldn't otherwise meet the threshold.\n   * Helpful for nodes like BlockStatements that hold a sequence. Note that\n   * this will generate overlapping instances, and so _omitOverlappingInstances\n   * helps cleanup the results.\n   *\n   * @private\n   *\n   * @param {Node}     node The node to traverse\n   * @param {function} fn   The callback to invoke\n   */\n  _walkSiblings(parent, fn) {\n    // group siblings that wouldn't otherwise meet threshold\n    var children = NodeUtils.getChildren(parent);\n    var n = this._threshold;\n\n    for (let i = 0; i < children.length - 1; i++) {\n      let nodes = NodeUtils.getDFSTraversal(children[i], n);\n      if (nodes.length === n) continue;\n\n      for (let j = i + 1; j < children.length; j++) {\n        nodes = nodes.concat(NodeUtils.getDFSTraversal(children[j], n));\n        if (nodes.length >= n) {\n          fn(nodes.slice(0, n));\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Generates a key based on the combined types of each of the supplied nodes.\n   * Pushes the array to another array at the generated key in _map. Nodes\n   * are updated to keep a reference to all their occurrences in _map.\n   *\n   * @private\n   *\n   * @param {Node[]} nodes\n   */\n  _insert(nodes) {\n    var key = this._getMapKey(nodes);\n\n    nodes.forEach(node => {\n      if (!node.occurrences) {\n        node.occurrences = {};\n      }\n      if (!node.occurrences[key]) {\n        node.occurrences[key] = [];\n      }\n      node.occurrences[key].push(nodes);\n    });\n\n    if (!this._map[key]) {\n      this._map[key] = [];\n    }\n\n    this._map[key].push(nodes);\n  }\n\n  /**\n   * Traverses the keys at which the various nodes are stored. A key containing\n   * an array of more than a single entry indicates a potential match. The nodes\n   * are then grouped if identifier matching is enabled. A match results in the\n   * relevant nodes being removed from any future results. This pruning ensures\n   * that we only include the greatest common parent in a set of matches.\n   *\n   * @private\n   *\n   * @fires Inspector#match\n   */\n  _analyze() {\n    var keys = Object.keys(this._map)\n      .filter(key => this._map[key].length >= this._minInstances);\n\n    // Need to use a stable sort to ensure parent nodes are traversed\n    // before children when lengths are equal\n    var sortedKeys = stable(keys, (a, b) => {\n      return this._map[b].length - this._map[a].length;\n    });\n\n    for (let key of sortedKeys) {\n      if (!this._map[key] || this._map[key].length < this._minInstances) {\n        continue;\n      }\n\n      let nodeArrays = this._map[key].slice(0);\n      this._omitOverlappingInstances(nodeArrays);\n\n      // groups will be of type Node[][][]\n      let groups = [nodeArrays];\n      if (this._identifiers) {\n        groups = this._groupByMatchingIdentifiers(groups);\n      }\n      if (this._literals) {\n        groups = this._groupByMatchingLiterals(groups);\n      }\n\n      for (let i = 0; i < groups.length; i++) {\n        if (groups[i].length < this._minInstances) continue;\n\n        this._expand(groups[i]);\n        let match = new Match(groups[i]);\n        match.populateLines(this._fileContents);\n        this.emit('match', match);\n        this._prune(groups[i]);\n      }\n    }\n  }\n\n  /**\n   * Removes overlapping instances from a group of node arrays. That is,\n   * if one instance has nodes abcd, and another has bcde, then bcde will\n   * be removed from the array.\n   *\n   * @private\n   *\n   * @param {Node[][]} nodeArrays\n   */\n  _omitOverlappingInstances(nodeArrays) {\n    var set = new Set();\n\n    var hasOverlap = (nodes) => {\n      return nodes.some(node => set.has(node));\n    };\n\n    var addNodes = (nodes) => {\n      nodes.forEach(node => set.add(node));\n    };\n\n    for (let i = 0; i < nodeArrays.length; i++) {\n      if (hasOverlap(nodeArrays[i])) {\n        nodeArrays.splice(i--, 1);\n        continue;\n      } else {\n        addNodes(nodeArrays[i]);\n      }\n    }\n  }\n\n  /**\n   * Iterates over the multi-dimensional array of nodes, and returns a new\n   * array grouping them based on matching identifiers.\n   *\n   * @private\n   *\n   * @param   {Node[][][]} groups\n   * @returns {Node[][][]}\n   */\n  _groupByMatchingIdentifiers(groups) {\n    return this._group(groups, (nodes) => {\n      return nodes\n        .filter(node => node.name)\n        .map(node => node.name)\n        .join(':');\n    });\n  }\n\n  /**\n   * Iterates over the multi-dimensional array of nodes, and returns a new\n   * array grouping them based on matching literals.\n   *\n   * @private\n   *\n   * @param   {Node[][][]} groups\n   * @returns {Node[][][]}\n   */\n  _groupByMatchingLiterals(groups) {\n    return this._group(groups, (nodes) => {\n      return nodes\n        .filter(node => node.type.includes('Literal'))\n        .map(node => node.value)\n        .join(':');\n    });\n  }\n\n  /**\n   * Expands each instance of a match to the largest common sequence of nodes\n   * with the same type, and optionally identifiers. Each array of nodes is\n   * modified in place.\n   *\n   * @private\n   *\n   * @param {Node[][]} nodeArrays\n   */\n  _expand(nodeArrays) {\n    var traversals = nodeArrays.map(nodes => {\n      return this._traversals[nodes[0].loc.filename];\n    });\n\n    var headPositions = nodeArrays.map((nodes, i) => {\n      return traversals[i].indexOf(nodes[0]);\n    });\n\n    var tailPositions = nodeArrays.map((nodes, i) => {\n      var last = nodes[nodes.length - 1];\n      return traversals[i].indexOf(last);\n    });\n\n    var incr = (pos) => pos + 1;\n    var decr = (pos) => pos - 1;\n    var getNode = (pos, i) => traversals[i][pos];\n    var alreadyIncluded = (nodes) => {\n      return nodes.some(node => {\n        return nodeArrays.some(array => array.indexOf(node) !== -1)\n      });\n    };\n\n    var isComplete = (nodes) => {\n      return (!NodeUtils.typesMatch(nodes) || alreadyIncluded(nodes)) ||\n        (this._identifiers && !NodeUtils.identifiersMatch(nodes)) ||\n        (this._literals && !NodeUtils.literalsMatch(nodes));\n    };\n\n    while (true) {\n      headPositions = headPositions.map(decr);\n      let nodes = headPositions.map(getNode);\n      if (isComplete(nodes)) break;\n      nodeArrays.forEach((array, i) => array.unshift(nodes[i]));\n    }\n\n    while (true) {\n      tailPositions = tailPositions.map(incr);\n      let nodes = tailPositions.map(getNode);\n      if (isComplete(nodes)) break;\n      nodeArrays.forEach((array, i) => array.push(nodes[i]));\n    }\n  }\n\n  /**\n   * Removes the nodes from consideration in any additional matches.\n   *\n   * @private\n   *\n   * @param {Node[][]} nodeArrays\n   */\n  _prune(nodeArrays) {\n    for (let i = 0; i < nodeArrays.length; i++) {\n      let nodes = nodeArrays[i];\n      for (let j = 0; j < nodes.length; j++) {\n        this._removeNode(nodes[j]);\n      }\n    }\n  }\n\n  /**\n   * Removes all occurrences of a given node.\n   *\n   * @private\n   *\n   * @param {Node} node The node to remove\n   */\n  _removeNode(node) {\n    for (let key in node.occurrences) {\n      for (let i = 0; i < node.occurrences[key].length; i++) {\n      if (!this._map[key]) break;\n        let index = this._map[key].indexOf(node.occurrences[key][i]);\n        if (index > -1) {\n          this._map[key].splice(index, 1);\n        }\n\n        // Delete empty buckets\n        if (!this._map[key].length) {\n          delete this._map[key];\n        }\n      }\n\n      delete node.occurrences[key];\n    }\n  }\n\n  /**\n   * Generates a key based on the type of each of the passed nodes, returned\n   * as a base64-encoded sha1 hash.\n   *\n   * @private\n   *\n   * @param   {Node[]} nodes The nodes for which to generate the key\n   * @returns {string}\n   */\n  _getMapKey(nodes) {\n    var key = nodes[0].type;\n    var length = nodes.length;\n\n    // Significantly faster than a map & join\n    for (var i = 1; i < length; i++) {\n      key += ':' + nodes[i].type;\n    }\n\n    // Prefer shorter key lengths (base64 < hex)\n    return crypto.createHash('sha1').update(key).digest('base64');\n  }\n\n  /**\n   * Accepts a multi-dimensional array of nodes and groups them based on the\n   * supplied function, which is expected to return a string.\n   *\n   * @private\n   *\n   * @param   {Node[][][]} groups The groups of nodes to further group\n   * @param   {function}   fn     Synchronous function for generating group ids\n   * @returns {Node[][][]}\n   */\n  _group(groups, fn) {\n    var res = [];\n    var map = Object.create(null);\n\n    for (let i = 0; i < groups.length; i++) {\n      for (let j = 0; j < groups[i].length; j++) {\n        let id = fn(groups[i][j]);\n        if (!map[id]) {\n          map[id] = [];\n        }\n\n        map[id].push(groups[i][j]);\n      }\n\n      for (let key in map) {\n        res.push(map[key]);\n      }\n\n      map = Object.create(null);\n    }\n\n    return res;\n  }\n}\n\nmodule.exports = Inspector;\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/inspector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/inspector.js",
    "static": true,
    "longname": "lib/inspector.js~util",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/inspector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "EventEmitter",
    "memberof": "lib/inspector.js",
    "static": true,
    "longname": "lib/inspector.js~EventEmitter",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/inspector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "fs",
    "memberof": "lib/inspector.js",
    "static": true,
    "longname": "lib/inspector.js~fs",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/inspector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "parse",
    "memberof": "lib/inspector.js",
    "static": true,
    "longname": "lib/inspector.js~parse",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/inspector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "Match",
    "memberof": "lib/inspector.js",
    "static": true,
    "longname": "lib/inspector.js~Match",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/inspector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "NodeUtils",
    "memberof": "lib/inspector.js",
    "static": true,
    "longname": "lib/inspector.js~NodeUtils",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/inspector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "crypto",
    "memberof": "lib/inspector.js",
    "static": true,
    "longname": "lib/inspector.js~crypto",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/inspector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "stable",
    "memberof": "lib/inspector.js",
    "static": true,
    "longname": "lib/inspector.js~stable",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/inspector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "Inspector",
    "memberof": "lib/inspector.js",
    "static": true,
    "longname": "lib/inspector.js~Inspector",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/inspector.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#constructor",
    "access": "public",
    "description": "Creates a new Inspector, which extends EventEmitter. filePaths is expected\nto be an array of string paths. Also accepts an options object with any\ncombination of the following: threshold, identifiers literals, and\nminInstances. Threshold indicates the minimum number of nodes to analyze.\nIdentifiers indicates whether or not the nodes in a match should also have\nmatching identifiers, and literals whether or not literal values should\nmatch. minInstances specifies the min number of instances for a match.\nAn instance of Inspector emits the following events: start, match and end.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "EventEmitter"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "filePaths",
        "description": "The files on which to run the inspector"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Options to set for the inspector"
      }
    ]
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_filePaths",
    "memberof": "lib/inspector.js~Inspector",
    "static": false,
    "longname": "lib/inspector.js~Inspector#_filePaths",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_threshold",
    "memberof": "lib/inspector.js~Inspector",
    "static": false,
    "longname": "lib/inspector.js~Inspector#_threshold",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_identifiers",
    "memberof": "lib/inspector.js~Inspector",
    "static": false,
    "longname": "lib/inspector.js~Inspector#_identifiers",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_literals",
    "memberof": "lib/inspector.js~Inspector",
    "static": false,
    "longname": "lib/inspector.js~Inspector#_literals",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_minInstances",
    "memberof": "lib/inspector.js~Inspector",
    "static": false,
    "longname": "lib/inspector.js~Inspector#_minInstances",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_map",
    "memberof": "lib/inspector.js~Inspector",
    "static": false,
    "longname": "lib/inspector.js~Inspector#_map",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_fileContents",
    "memberof": "lib/inspector.js~Inspector",
    "static": false,
    "longname": "lib/inspector.js~Inspector#_fileContents",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_traversals",
    "memberof": "lib/inspector.js~Inspector",
    "static": false,
    "longname": "lib/inspector.js~Inspector#_traversals",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "numFiles",
    "memberof": "lib/inspector.js~Inspector",
    "static": false,
    "longname": "lib/inspector.js~Inspector#numFiles",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "run",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#run",
    "access": "public",
    "description": "Runs the inspector on the given file paths, as provided in the constructor.\nEmits a start event, followed by a series of match events for any detected\nsimilarities, and an end event on completion.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@fires",
        "tagValue": "Inspector#start"
      },
      {
        "tagName": "@fires",
        "tagValue": "Inspector#match"
      },
      {
        "tagName": "@fires",
        "tagValue": "Inspector#end"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "_walk",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_walk",
    "access": "private",
    "description": "Walks a given node's AST, building up arrays of nodes that meet the\ninspector's threshold. When found, the callback is invoked and passed\nthe array of nodes.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to traverse"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The callback to invoke"
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "_walkSiblings",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_walkSiblings",
    "access": "private",
    "description": "Walks sibling nodes under a parent, grouping their DFS traversals, and\ninvoking the callback for those that wouldn't otherwise meet the threshold.\nHelpful for nodes like BlockStatements that hold a sequence. Note that\nthis will generate overlapping instances, and so _omitOverlappingInstances\nhelps cleanup the results.",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to traverse"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The callback to invoke"
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "_insert",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_insert",
    "access": "private",
    "description": "Generates a key based on the combined types of each of the supplied nodes.\nPushes the array to another array at the generated key in _map. Nodes\nare updated to keep a reference to all their occurrences in _map.",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "_analyze",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_analyze",
    "access": "private",
    "description": "Traverses the keys at which the various nodes are stored. A key containing\nan array of more than a single entry indicates a potential match. The nodes\nare then grouped if identifier matching is enabled. A match results in the\nrelevant nodes being removed from any future results. This pruning ensures\nthat we only include the greatest common parent in a set of matches.",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@fires",
        "tagValue": "Inspector#match"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "_omitOverlappingInstances",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_omitOverlappingInstances",
    "access": "private",
    "description": "Removes overlapping instances from a group of node arrays. That is,\nif one instance has nodes abcd, and another has bcde, then bcde will\nbe removed from the array.",
    "lineNumber": 224,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeArrays",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_groupByMatchingIdentifiers",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_groupByMatchingIdentifiers",
    "access": "private",
    "description": "Iterates over the multi-dimensional array of nodes, and returns a new\narray grouping them based on matching identifiers.",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node[][][]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[][][]"
        ],
        "spread": false,
        "optional": false,
        "name": "groups",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node[][][]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_groupByMatchingLiterals",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_groupByMatchingLiterals",
    "access": "private",
    "description": "Iterates over the multi-dimensional array of nodes, and returns a new\narray grouping them based on matching literals.",
    "lineNumber": 272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node[][][]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[][][]"
        ],
        "spread": false,
        "optional": false,
        "name": "groups",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node[][][]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_expand",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_expand",
    "access": "private",
    "description": "Expands each instance of a match to the largest common sequence of nodes\nwith the same type, and optionally identifiers. Each array of nodes is\nmodified in place.",
    "lineNumber": 290,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeArrays",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "_prune",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_prune",
    "access": "private",
    "description": "Removes the nodes from consideration in any additional matches.",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeArrays",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "_removeNode",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_removeNode",
    "access": "private",
    "description": "Removes all occurrences of a given node.",
    "lineNumber": 357,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to remove"
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "_getMapKey",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_getMapKey",
    "access": "private",
    "description": "Generates a key based on the type of each of the passed nodes, returned\nas a base64-encoded sha1 hash.",
    "lineNumber": 385,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "The nodes for which to generate the key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "_group",
    "memberof": "lib/inspector.js~Inspector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/inspector.js~Inspector#_group",
    "access": "private",
    "description": "Accepts a multi-dimensional array of nodes and groups them based on the\nsupplied function, which is expected to return a string.",
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node[][][]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[][][]"
        ],
        "spread": false,
        "optional": false,
        "name": "groups",
        "description": "The groups of nodes to further group"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Synchronous function for generating group ids"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node[][][]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "lib/match.js",
    "content": "var strip     = require('strip-indent');\nvar crypto    = require('crypto');\nvar NodeUtils = require('./nodeUtils');\n\n/**\n *\n */\nclass Match {\n  /**\n   * Creates a new Match.\n   *\n   * @constructor\n   *\n   * @param {Node[][]} nodeArrays Multi-dimensional array of nodes\n   */\n  constructor(nodeArrays) {\n    this.hash = this._getHash(nodeArrays);\n    this.instances = this._generateInstances(nodeArrays);\n  }\n\n  /**\n   * Populates each match instance with a lines property containing the\n   * relevant source code lines.\n   *\n   * @param {object} fileContents The file paths and their contents\n   */\n   populateLines(fileContents) {\n    this.instances.forEach(instance => {\n      var lines = fileContents[instance.filename]\n        .slice(instance.start.line - 1, instance.end.line)\n        .join('\\n');\n\n      instance.lines = strip(lines);\n    });\n   }\n\n  /**\n   * Generates a hash for a match.\n   *\n   * @private\n   *\n   * @param   {Node[][]} nodeArrays   Multi-dimensional array of nodes\n   * @returns {String}\n   */\n  _getHash(nodeArrays) {\n    var str = nodeArrays\n      .reduce((a, b) => a.concat(b))\n      .map(node => node.name || node.type)\n      .join(':');\n\n    return crypto.createHash('sha1').update(str).digest('hex');\n  }\n\n  /**\n   * Returns an array of objects containing the filename, start, end, and\n   * lines associated with all instances of a match. Due to sibling traversal,\n   * the end line must be searched for among the nodes, and isn't always\n   * defined by the last node in the array.\n   *\n   * @private\n   *\n   * @param   {Node[][]} nodeArrays   Multi-dimensional array of nodes\n   * @returns {object}\n   */\n  _generateInstances(nodeArrays) {\n    return nodeArrays.map((nodes) => {\n      var filename = nodes[0].loc.filename;\n\n      var start = nodes.reduce((res, curr) => {\n        return NodeUtils.isBefore(curr, res) ? curr : res;\n      }).loc.start;\n\n      // The end line requires more careful approximation so as not to\n      // accidentally include a large number of irrelevant src lines\n      // from a large node\n      var base = nodes.map(node => node.loc.start)\n        .reduce((res, curr) => (res.line > curr.line) ? res : curr);\n\n      var last = nodes[nodes.length - 1];\n      var lastEnd = last.loc.end;\n      if (lastEnd.line > base.line && !NodeUtils.getChildren(last).length) {\n        base = lastEnd;\n      }\n\n      var maxEnd = nodes.map(node => node.loc.end)\n        .reduce((res, curr) => (res.line > curr.line) ? res : curr);\n      var end = maxEnd.line - base.line <= 2 ? maxEnd : base;\n\n      return {filename, start, end};\n    });\n  }\n}\n\nmodule.exports = Match;\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/match.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "strip",
    "memberof": "lib/match.js",
    "static": true,
    "longname": "lib/match.js~strip",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/match.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "crypto",
    "memberof": "lib/match.js",
    "static": true,
    "longname": "lib/match.js~crypto",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/match.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "NodeUtils",
    "memberof": "lib/match.js",
    "static": true,
    "longname": "lib/match.js~NodeUtils",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/match.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "Match",
    "memberof": "lib/match.js",
    "static": true,
    "longname": "lib/match.js~Match",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/match.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/match.js~Match",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/match.js~Match#constructor",
    "access": "public",
    "description": "Creates a new Match.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeArrays",
        "description": "Multi-dimensional array of nodes"
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "hash",
    "memberof": "lib/match.js~Match",
    "static": false,
    "longname": "lib/match.js~Match#hash",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "instances",
    "memberof": "lib/match.js~Match",
    "static": false,
    "longname": "lib/match.js~Match#instances",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "populateLines",
    "memberof": "lib/match.js~Match",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/match.js~Match#populateLines",
    "access": "public",
    "description": "Populates each match instance with a lines property containing the\nrelevant source code lines.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "fileContents",
        "description": "The file paths and their contents"
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "_getHash",
    "memberof": "lib/match.js~Match",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/match.js~Match#_getHash",
    "access": "private",
    "description": "Generates a hash for a match.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeArrays",
        "description": "Multi-dimensional array of nodes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "_generateInstances",
    "memberof": "lib/match.js~Match",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/match.js~Match#_generateInstances",
    "access": "private",
    "description": "Returns an array of objects containing the filename, start, end, and\nlines associated with all instances of a match. Due to sibling traversal,\nthe end line must be searched for among the nodes, and isn't always\ndefined by the last node in the array.",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[][]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeArrays",
        "description": "Multi-dimensional array of nodes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "lib/nodeUtils.js",
    "content": "var stable = require('stable');\n\n/**\n * Cache for getChildren, holding the keys to traverse for a given Node type.\n * Some JSX node types are hardcoded to ensure correct property traversal order.\n * For example, this ensures that a JSXElement's children are traversed prior\n * to the closing element.\n */\nvar childKeys = {\n  JSXElement: ['openingElement', 'extra', 'children', 'closingElement'],\n  JSXOpeningElement: ['name', 'attributes'],\n  JSXAttribute: ['name', 'value'],\n};\n\n/**\n *\n */\nclass NodeUtils {\n  /**\n   * Walks a root node's subtrees using DFS, invoking the passed callback with\n   * three args: node, parent, and ancestors. The root node, presumably Program,\n   * is ignored.\n   *\n   * @param {Node}     root The root node of the AST to traverse\n   * @param {function} fn   Callback to invoke\n   */\n  static walkSubtrees(root, fn) {\n    var visit = (node, parent, ancestors) => {\n      fn(node, parent, ancestors);\n      ancestors = ancestors.concat(node);\n      NodeUtils.getChildren(node).forEach((child) => {\n        visit(child, node, ancestors);\n      });\n    };\n\n    NodeUtils.getChildren(root).forEach((child) => {\n      visit(child, null, []);\n    });\n  }\n\n  /**\n   * Returns an array of nodes in the passed AST, traversed using DFS. Accepts\n   * an optional maximum number, n, of nodes to return. The returned array\n   * always begins with the root node.\n   *\n   * @param   {Node}   node The root node of the AST to traverse\n   * @param   {int}    [n]  Optional max number of nodes to return\n   * @returns {Node[]}\n   */\n  static getDFSTraversal(node, n) {\n    var res = [];\n\n    var dfs = (node) => {\n      if (n && res.length >= n) return;\n      res.push(node);\n      NodeUtils.getChildren(node).forEach(dfs);\n    };\n\n    dfs(node);\n\n    return res.slice(0, n);\n  }\n\n  /**\n   * Returns an array of nodes in the passed AST, traversed using BFS. Accepts\n   * an optional maximum number, n, of nodes to return. The returned array\n   * always begins with the root node.\n   *\n   * @param   {Node}   node The root node of the AST to traverse\n   * @param   {int}    [n]  Optional max number of nodes to return\n   * @returns {Node[]}\n   */\n  static getBFSTraversal(node, n) {\n    var queue = [node];\n    var res = [node];\n\n    while (queue.length) {\n      node = queue.shift();\n\n      if (n && res.length >= n) {\n        return res.slice(0, n);\n      }\n\n      let children = NodeUtils.getChildren(node) || [];\n      for (let i = 0; i < children.length; i++) {\n        queue.push(children[i]);\n        res.push(children[i]);\n      }\n    }\n\n    return res.slice(0, n);\n  }\n\n  /**\n   * Returns a given node's children as an array of nodes. Designed for use\n   * with ESTree/Babylon spec ASTs.\n   *\n   * @param   {Node}   The node for which to retrieve its children\n   * @returns {Node[]} An array of child nodes\n   */\n  static getChildren(node) {\n    var res = [];\n\n    if (!childKeys[node.type]) {\n      childKeys[node.type] = Object.keys(node).filter((key) => {\n        return key !== 'loc' && typeof node[key] === 'object';\n      });\n    }\n\n    // Ignore null values, as well as JSText nodes incorrectly generated\n    // by babylon that contain only newlines and spaces\n    var filterIgnored = (nodes) => nodes.filter(node => {\n      return node && (node.type !== 'JSXText' || node.value.trim());\n    });\n\n    childKeys[node.type].forEach((key) => {\n      var val = node[key];\n      if (val && val.type) {\n        res.push(val);\n      } else if (val instanceof Array) {\n        res = res.concat(filterIgnored(val));\n      }\n    });\n\n    return res;\n  }\n\n  /**\n   * Returns whether or not the first node appears before the second, by\n   * comparing both their starting lines and columns.\n   *\n   * @param   {object} a\n   * @param   {object} b\n   * @returns {bool}\n   */\n  static isBefore(a, b) {\n    a = a.loc.start;\n    b = b.loc.start;\n    return a.line < b.line || (a.line === b.line && a.column < b.column);\n  }\n\n  /**\n   * Returns whether or not the nodes are part of an ES6 module import.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static isES6ModuleImport(nodes) {\n    return nodes[0] && nodes[0].type === 'ImportDeclaration';\n  }\n\n  /**\n   * Returns whether or not the nodes belong to class boilerplate.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static isES6ClassBoilerplate(nodes) {\n    var last = nodes[nodes.length - 1];\n    return last.type === 'ClassDeclaration' || last.type === 'ClassBody';\n  }\n\n  /**\n   * Returns whether or not the nodes are part of an AMD require or define\n   * expression.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static isAMD(nodes) {\n    var hasAMDName = function(node) {\n      if (!node || !node.name) return;\n      return (node.name === 'define' || node.name === 'require');\n    }\n\n    // Iterate from last node\n    for (let i = nodes.length - 1; i >= nodes.length - 5; i--) {\n      if (!nodes[i]) {\n        return false;\n      } else if (nodes[i].type !== 'ExpressionStatement' ||\n          nodes[i].expression.type !== 'CallExpression') {\n        continue;\n      }\n\n      // Handle basic cases where define/require are a property\n      let callee = nodes[i].expression.callee;\n      if (hasAMDName(callee)) {\n        return true;\n      } else if (callee.type === 'MemberExpression' &&\n          hasAMDName(callee.property)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns whether or not the nodes are part of a CommonJS require statement.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static isCommonJS(nodes) {\n    if (!nodes[0]) {\n      return false;\n    } else if (nodes[0].type === 'ExpressionStatement' &&\n        nodes[0].expression.type === 'CallExpression' &&\n        nodes[0].expression.callee.name === 'require') {\n      return true;\n    } else if (nodes[0].type === 'VariableDeclaration' && nodes[0].declarations) {\n      for (let j = 0; j < nodes[0].declarations.length; j++) {\n        let declaration = nodes[0].declarations[j];\n\n        if (declaration.type === 'VariableDeclarator' &&\n            declaration.init &&\n            declaration.init.type === 'CallExpression' &&\n            declaration.init.callee.name === 'require') {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns whether or not all nodes are of the same type.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static typesMatch(nodes) {\n    return nodes.every(node => node && node.type === nodes[0].type);\n  }\n\n  /**\n   * Returns whether or not all nodes have the same identifier.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static identifiersMatch(nodes) {\n    return nodes[0] && nodes.every(node => {\n      return node && node.name === nodes[0].name;\n    });\n  }\n\n  /**\n   * Returns whether or not all nodes have the same literal value.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static literalsMatch(nodes) {\n    var isLiteral = (node) => {\n      return node.type.includes('Literal') || node.type === 'JSXText';\n    }\n\n    return nodes[0] && nodes.every(node => {\n      return node && (!isLiteral(node) || node.value === nodes[0].value);\n    });\n  }\n}\n\nmodule.exports = NodeUtils;\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/nodeUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "stable",
    "memberof": "lib/nodeUtils.js",
    "static": true,
    "longname": "lib/nodeUtils.js~stable",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/nodeUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "childKeys",
    "memberof": "lib/nodeUtils.js",
    "static": true,
    "longname": "lib/nodeUtils.js~childKeys",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/nodeUtils.js",
    "importStyle": null,
    "description": "Cache for getChildren, holding the keys to traverse for a given Node type.\nSome JSX node types are hardcoded to ensure correct property traversal order.\nFor example, this ensures that a JSXElement's children are traversed prior\nto the closing element.",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"JSXElement\": *, \"JSXOpeningElement\": *, \"JSXAttribute\": *}"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "NodeUtils",
    "memberof": "lib/nodeUtils.js",
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/nodeUtils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "walkSubtrees",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.walkSubtrees",
    "access": "public",
    "description": "Walks a root node's subtrees using DFS, invoking the passed callback with\nthree args: node, parent, and ancestors. The root node, presumably Program,\nis ignored.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "The root node of the AST to traverse"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Callback to invoke"
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "getDFSTraversal",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.getDFSTraversal",
    "access": "public",
    "description": "Returns an array of nodes in the passed AST, traversed using DFS. Accepts\nan optional maximum number, n, of nodes to return. The returned array\nalways begins with the root node.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The root node of the AST to traverse"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": true,
        "name": "n",
        "description": "Optional max number of nodes to return"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "getBFSTraversal",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.getBFSTraversal",
    "access": "public",
    "description": "Returns an array of nodes in the passed AST, traversed using BFS. Accepts\nan optional maximum number, n, of nodes to return. The returned array\nalways begins with the root node.",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The root node of the AST to traverse"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": true,
        "name": "n",
        "description": "Optional max number of nodes to return"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getChildren",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.getChildren",
    "access": "public",
    "description": "Returns a given node's children as an array of nodes. Designed for use\nwith ESTree/Babylon spec ASTs.",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node[]} An array of child nodes"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "node for which to retrieve its children"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node[]"
      ],
      "spread": false,
      "description": "An array of child nodes"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "isBefore",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.isBefore",
    "access": "public",
    "description": "Returns whether or not the first node appears before the second, by\ncomparing both their starting lines and columns.",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{bool}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "isES6ModuleImport",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.isES6ModuleImport",
    "access": "public",
    "description": "Returns whether or not the nodes are part of an ES6 module import.",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "isES6ClassBoilerplate",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.isES6ClassBoilerplate",
    "access": "public",
    "description": "Returns whether or not the nodes belong to class boilerplate.",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "isAMD",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.isAMD",
    "access": "public",
    "description": "Returns whether or not the nodes are part of an AMD require or define\nexpression.",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "isCommonJS",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.isCommonJS",
    "access": "public",
    "description": "Returns whether or not the nodes are part of a CommonJS require statement.",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "typesMatch",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.typesMatch",
    "access": "public",
    "description": "Returns whether or not all nodes are of the same type.",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "identifiersMatch",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.identifiersMatch",
    "access": "public",
    "description": "Returns whether or not all nodes have the same identifier.",
    "lineNumber": 243,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "literalsMatch",
    "memberof": "lib/nodeUtils.js~NodeUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/nodeUtils.js~NodeUtils.literalsMatch",
    "access": "public",
    "description": "Returns whether or not all nodes have the same literal value.",
    "lineNumber": 255,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "lib/parser.js",
    "content": "var babylon = require('babylon');\nvar debug   = require('./debug');\n\n/**\n * Parses the specified src string with babylon, returning the resulting AST\n * and skipping the undocumented File root node, which is neither Babylon AST\n * nor ESTree spec compliant.\n *\n * @param {string} src      Source to parse\n * @param {string} filePath Path to the file\n */\nexports.parse = function(src, filePath) {\n  debug(`parsing ${filePath}`);\n  try {\n    return attempt(\n      () => _parse(src, filePath, 'script'),\n      () => _parse(src, filePath, 'module')\n    );\n  } catch (err) {\n    let ctx = getErrorContext(err, src);\n    throw new Error(`Couldn't parse ${filePath}: ${err.message}${ctx}`);\n  }\n};\n\nfunction attempt(...fns) {\n  for (let i = 0; i < fns.length; i++) {\n    try {\n      return fns[i]();\n    } catch (err) {\n      if (i === fns.length - 1) throw err;\n    }\n  }\n}\n\nfunction _parse(src, filePath, sourceType) {\n  return babylon.parse(src, {\n    allowReturnOutsideFunction: true,\n    allowImportExportEverywhere: true,\n    sourceType: sourceType,\n    sourceFilename: filePath,\n    plugins: ['jsx', 'flow', 'doExpressions', 'objectRestSpread', 'decorators',\n      'classProperties', 'exportExtensions', 'asyncGenerators', 'functionBind',\n      'functionSent', 'dynamicImport']\n  }).program;\n}\n\nfunction getErrorContext(err, src) {\n  if (!err.loc || !err.loc.line || err.loc.column >= 100) return '';\n\n  var line = src.split('\\n')[err.loc.line - 1];\n  var caret = ' '.repeat(err.loc.column) + '^';\n\n  return `\\n${line}\\n${caret}`;\n}\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "babylon",
    "memberof": "lib/parser.js",
    "static": true,
    "longname": "lib/parser.js~babylon",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/parser.js",
    "static": true,
    "longname": "lib/parser.js~debug",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "parse",
    "memberof": "lib/parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parser.js~parse",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/parser.js",
    "importStyle": null,
    "description": "Parses the specified src string with babylon, returning the resulting AST\nand skipping the undocumented File root node, which is neither Babylon AST\nnor ESTree spec compliant.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": "Source to parse"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "Path to the file"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "attempt",
    "memberof": "lib/parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parser.js~attempt",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "fns",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "_parse",
    "memberof": "lib/parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parser.js~_parse",
    "access": "private",
    "export": false,
    "importPath": "jsinspect/lib/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "src",
        "types": [
          "*"
        ]
      },
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "sourceType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "getErrorContext",
    "memberof": "lib/parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/parser.js~getErrorContext",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      },
      {
        "name": "src",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "lib/reporters/base.js",
    "content": "var util  = require('util');\nvar path  = require('path');\nvar chalk = require('chalk');\n\n/**\n *\n */\nclass BaseReporter {\n  /**\n   * A base reporter from which all others inherit. Registers a listener on the\n   * passed inspector instance for tracking the number of matches found.\n   *\n   * @constructor\n   *\n   * @param {Inspector} inspector Instance on which to register its listeners\n   * @param {object}    opts      Options to set for the reporter\n   */\n  constructor(inspector, opts) {\n    opts = opts || {};\n\n    this._inspector = inspector;\n    this._found = 0;\n    this._truncate = (opts.truncate === 0) ? 0 : (opts.truncate || 100);\n    this._writableStream = opts.writableStream || process.stdout;\n    this._registerListener();\n\n    inspector.on('end', () => {\n      if (this._writableStream === process.stdout) return;\n      // give the reporter a chance to write its last chunk by\n      // deferring end to the next tick\n      process.nextTick(() => this._writableStream.end());\n    });\n  }\n\n  /**\n   * Registers a listener to the \"match\" event exposed by the Inspector\n   * instance. Increments _found for each match emitted, and invokes the\n   * object's _getOutput method, writing it to stdout.\n   */\n  _registerListener() {\n    this._inspector.on('match', (match) => {\n      this._found++;\n      this._writableStream.write(this._getOutput(match));\n    });\n  }\n\n  /**\n   * Registers a listener that prints a final summary outlining the number of\n   * matches detected, as well as the number of files analyzed.\n   */\n  _registerSummary() {\n    this._inspector.on('end', () => {\n      var numFiles = this._inspector.numFiles;\n      var files = (numFiles > 1) ? 'files' : 'file';\n      var matches = (this._found > 1) ? 'matches' : 'match';\n      var summary;\n\n      if (!this._found) {\n        summary = chalk.green(util.format(\n          '\\nNo matches found across %d %s', numFiles, files));\n      } else {\n        summary = chalk.red(util.format('\\n%d %s found across %d %s',\n          this._found, matches, numFiles, files));\n      }\n\n      this._writableStream.write(summary + '\\n');\n    });\n  }\n\n  /**\n   * Returns a string containing the path to the file in which the nodes are\n   * located, as well as the lines on which the nodes exist.\n   *\n   * @param   {Object} instance\n   * @returns {string}\n   */\n  _getFormattedLocation(instance) {\n    var filePath = this._getRelativePath(instance.filename);\n    return `${filePath}:${instance.start.line},${instance.end.line}`;\n  }\n\n  /**\n   * Returns the lines associated with an instance.\n   *\n   * @param   {Object} instance\n   * @returns {string}\n   */\n  _getLines(instance) {\n    var lines = instance.lines;\n    if (this._truncate) {\n      lines = lines.split('\\n').slice(0, this._truncate).join('\\n');\n    }\n\n    return lines;\n  }\n\n  /**\n   * Returns the relative path for a file.\n   *\n   * @param   {string} filePath\n   * @returns {string}\n   */\n  _getRelativePath(filePath) {\n    if (filePath.charAt(0) === '/') {\n      filePath = path.relative(process.cwd(), filePath);\n    }\n\n    return filePath;\n  }\n\n  /**\n   * Returns the absolute path for a file.\n   *\n   * @param   {string} filePath\n   * @returns {string}\n   */\n  _getAbsolutePath(filePath) {\n    if (filePath.charAt(0) !== '/') {\n      filePath = path.resolve(process.cwd(), filePath);\n    }\n\n    return filePath;\n  }\n}\n\nmodule.exports = BaseReporter;\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/reporters/base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/reporters/base.js",
    "static": true,
    "longname": "lib/reporters/base.js~util",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "path",
    "memberof": "lib/reporters/base.js",
    "static": true,
    "longname": "lib/reporters/base.js~path",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "chalk",
    "memberof": "lib/reporters/base.js",
    "static": true,
    "longname": "lib/reporters/base.js~chalk",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "BaseReporter",
    "memberof": "lib/reporters/base.js",
    "static": true,
    "longname": "lib/reporters/base.js~BaseReporter",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/base.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#constructor",
    "access": "public",
    "description": "A base reporter from which all others inherit. Registers a listener on the\npassed inspector instance for tracking the number of matches found.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Inspector"
        ],
        "spread": false,
        "optional": false,
        "name": "inspector",
        "description": "Instance on which to register its listeners"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "Options to set for the reporter"
      }
    ]
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "_inspector",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_inspector",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "_found",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_found",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "_truncate",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_truncate",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "_writableStream",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_writableStream",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "_registerListener",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_registerListener",
    "access": "private",
    "description": "Registers a listener to the \"match\" event exposed by the Inspector\ninstance. Increments _found for each match emitted, and invokes the\nobject's _getOutput method, writing it to stdout.",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "_registerSummary",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_registerSummary",
    "access": "private",
    "description": "Registers a listener that prints a final summary outlining the number of\nmatches detected, as well as the number of files analyzed.",
    "lineNumber": 51,
    "params": [],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "_getFormattedLocation",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_getFormattedLocation",
    "access": "private",
    "description": "Returns a string containing the path to the file in which the nodes are\nlocated, as well as the lines on which the nodes exist.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "_getLines",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_getLines",
    "access": "private",
    "description": "Returns the lines associated with an instance.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "_getRelativePath",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_getRelativePath",
    "access": "private",
    "description": "Returns the relative path for a file.",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "_getAbsolutePath",
    "memberof": "lib/reporters/base.js~BaseReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/base.js~BaseReporter#_getAbsolutePath",
    "access": "private",
    "description": "Returns the absolute path for a file.",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "lib/reporters/default.js",
    "content": "var util         = require('util');\nvar chalk        = require('chalk');\nvar BaseReporter = require('./base');\n\n/**\n *\n */\nclass DefaultReporter extends BaseReporter {\n  /**\n   * The default reporter, which displays both file and line information for\n   * each given match.\n   *\n   * @constructor\n   *\n   * @param {Inspector} inspector Instance on which to register its listeners\n   * @param {object}    opts      Options to set for the reporter\n   */\n  constructor(inspector, opts) {\n    opts = opts || {};\n    super(inspector, opts);\n    this._registerSummary();\n  }\n\n  /**\n   * Returns the string output to print for the given reporter. The string\n   * contains the number of instances associated with the match and the files\n   * and lines involved.\n   *\n   * @private\n   *\n   * @param   {Match}  match The inspector match to output\n   * @returns {string} The formatted output\n   */\n  _getOutput(match) {\n    var instances = match.instances;\n    var output = '\\n' + '-'.repeat(60) + '\\n\\n' +\n      chalk.bold(`Match - ${instances.length} instances\\n`);\n\n    instances.forEach((instance) => {\n      var location = this._getFormattedLocation(instance);\n      var lines = this._getLines(instance);\n      output += `\\n${location}\\n${chalk.grey(lines)}\\n`;\n    });\n\n    return output;\n  }\n}\n\nmodule.exports = DefaultReporter;\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/reporters/default.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/reporters/default.js",
    "static": true,
    "longname": "lib/reporters/default.js~util",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/default.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "chalk",
    "memberof": "lib/reporters/default.js",
    "static": true,
    "longname": "lib/reporters/default.js~chalk",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/default.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "BaseReporter",
    "memberof": "lib/reporters/default.js",
    "static": true,
    "longname": "lib/reporters/default.js~BaseReporter",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/default.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "class",
    "name": "DefaultReporter",
    "memberof": "lib/reporters/default.js",
    "static": true,
    "longname": "lib/reporters/default.js~DefaultReporter",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/default.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "BaseReporter"
    ]
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/reporters/default.js~DefaultReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/default.js~DefaultReporter#constructor",
    "access": "public",
    "description": "The default reporter, which displays both file and line information for\neach given match.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Inspector"
        ],
        "spread": false,
        "optional": false,
        "name": "inspector",
        "description": "Instance on which to register its listeners"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "Options to set for the reporter"
      }
    ]
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "_getOutput",
    "memberof": "lib/reporters/default.js~DefaultReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/default.js~DefaultReporter#_getOutput",
    "access": "private",
    "description": "Returns the string output to print for the given reporter. The string\ncontains the number of instances associated with the match and the files\nand lines involved.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The formatted output"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Match"
        ],
        "spread": false,
        "optional": false,
        "name": "match",
        "description": "The inspector match to output"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The formatted output"
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "lib/reporters/index.js",
    "content": "module.exports = {\n  default: require('./default.js'),\n  json:    require('./json.js'),\n  pmd:     require('./pmd.js')\n};\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/reporters/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "lib/reporters/json.js",
    "content": "var util         = require('util');\nvar path         = require('path');\nvar chalk        = require('chalk');\nvar BaseReporter = require('./base');\n\n/**\n *\n */\nclass JSONReporter extends BaseReporter {\n  /**\n   * A JSON reporter, which displays both file and line information for\n   * each given match.\n   *\n   * @constructor\n   *\n   * @param {Inspector} inspector Instance on which to register its listeners\n   * @param {object}    opts      Options to set for the reporter\n   */\n  constructor(inspector, opts) {\n    opts = opts || {};\n    super(inspector, opts);\n\n    var enabled = chalk.enabled;\n\n    inspector.on('start', () => {\n      chalk.enabled = false;\n      this._writableStream.write('[');\n    });\n\n    inspector.on('end', () => {\n      chalk.enabled = enabled;\n      this._writableStream.write(']\\n');\n    });\n  }\n\n  /**\n   * Returns the string output to print for the given reporter. The formatted\n   * JSON string contains the number of instances associated with the match and\n   * the files and lines involved.\n   *\n   * @private\n   *\n   * @param   {Match}  match The inspector match to output\n   * @returns {string} The formatted output\n   */\n  _getOutput(match) {\n    var output = (this._found > 1) ? ',\\n' : '';\n\n    output += JSON.stringify({\n      id: match.hash,\n      instances: match.instances.map(instance => {\n        return {\n          path: this._getRelativePath(instance.filename),\n          lines: [instance.start.line, instance.end.line],\n          code: this._getLines(instance)\n        };\n      })\n    });\n\n    return output;\n  }\n}\n\nmodule.exports = JSONReporter;\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/reporters/json.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/reporters/json.js",
    "static": true,
    "longname": "lib/reporters/json.js~util",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/json.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "path",
    "memberof": "lib/reporters/json.js",
    "static": true,
    "longname": "lib/reporters/json.js~path",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/json.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "chalk",
    "memberof": "lib/reporters/json.js",
    "static": true,
    "longname": "lib/reporters/json.js~chalk",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/json.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "BaseReporter",
    "memberof": "lib/reporters/json.js",
    "static": true,
    "longname": "lib/reporters/json.js~BaseReporter",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/json.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "JSONReporter",
    "memberof": "lib/reporters/json.js",
    "static": true,
    "longname": "lib/reporters/json.js~JSONReporter",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/json.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "BaseReporter"
    ]
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/reporters/json.js~JSONReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/json.js~JSONReporter#constructor",
    "access": "public",
    "description": "A JSON reporter, which displays both file and line information for\neach given match.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Inspector"
        ],
        "spread": false,
        "optional": false,
        "name": "inspector",
        "description": "Instance on which to register its listeners"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "Options to set for the reporter"
      }
    ]
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "_getOutput",
    "memberof": "lib/reporters/json.js~JSONReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/json.js~JSONReporter#_getOutput",
    "access": "private",
    "description": "Returns the string output to print for the given reporter. The formatted\nJSON string contains the number of instances associated with the match and\nthe files and lines involved.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The formatted output"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Match"
        ],
        "spread": false,
        "optional": false,
        "name": "match",
        "description": "The inspector match to output"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The formatted output"
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "lib/reporters/pmd.js",
    "content": "var util         = require('util');\nvar path         = require('path');\nvar chalk        = require('chalk');\nvar BaseReporter = require('./base');\n\n/**\n *\n */\nclass PMDReporter extends BaseReporter {\n  /**\n   * A PMD CPD XML reporter, which tries to fit jsinspect's output to something\n   * CI tools might expect from PMD.\n   *\n   * @constructor\n   *\n   * @param {Inspector} inspector Instance on which to register its listeners\n   * @param {object}    opts      Options to set for the reporter\n   */\n  constructor(inspector, opts) {\n    opts = opts || {};\n    super(inspector, opts);\n\n    var enabled = chalk.enabled;\n\n    inspector.on('start', () => {\n      chalk.enabled = false;\n      this._writableStream.write(\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n        '<pmd-cpd>\\n'\n      );\n    });\n\n    inspector.on('end', () => {\n      chalk.enabled = enabled;\n      this._writableStream.write('</pmd-cpd>\\n');\n    });\n  }\n\n  /**\n   * Returns an XML string containing a <duplication> element, with <file>\n   * children indicating the instance locations, and <codefragment> to hold the\n   * lines.\n   *\n   * @private\n   *\n   * @param   {Match}  match The inspector match to output\n   * @returns {string} The formatted output\n   */\n  _getOutput(match) {\n    var output = (this._found > 1) ? '\\n' : '';\n    var codeFragment = '';\n    var instances = match.instances;\n    var totalLines = this._getTotalLines(match);\n\n    output += `<duplication lines=\"${totalLines}\" id=\"${match.hash}\">\\n`;\n    instances.forEach((instance) => output += this._getFile(instance));\n\n    output += '<codefragment>';\n    instances.forEach((instance) => {\n      var location = this._getFormattedLocation(instance);\n      var lines = this._getLines(instance);\n      codeFragment += `\\n${location}\\n${chalk.grey(lines)}\\n`;\n    });\n    output += `${this._escape(codeFragment)}</codefragment>\\n</duplication>\\n`;\n\n    return output;\n  }\n\n  /**\n   * Returns the total number of lines spanned by a match.\n   *\n   * @param   {Match} match\n   * @returns {int}\n   */\n  _getTotalLines(match) {\n    return match.instances.reduce((res, curr) => {\n      return res + curr.end.line - curr.start.line + 1;\n    }, 0);\n  }\n\n  /**\n   * Returns an XML string containing the path to the file in which the instance\n   * is located, as well as its starting line. Absolute paths are required for\n   * Jenkins.\n   *\n   * @param   {object} instance\n   * @returns {string}\n   */\n  _getFile(instance) {\n    var filePath = this._getAbsolutePath(instance.filename);\n    return `<file path=\"${filePath}\" line=\"${instance.start.line}\"/>\\n`;\n  }\n\n  /**\n   * Returns an escaped string for use within XML.\n   *\n   * @param   {string} string The string to escape\n   * @returns {string} The escaped string\n   */\n  _escape(string) {\n    var escaped = {\n      \"'\": '&apos;',\n      '\"': '&quot;',\n      '&': '&amp;',\n      '>': '&gt;',\n      '<': '&lt;'\n    };\n\n    return string.replace(/(['\"&><])/g, (string, char) => {\n      return escaped[char];\n    });\n  }\n}\n\nmodule.exports = PMDReporter;\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/lib/reporters/pmd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "util",
    "memberof": "lib/reporters/pmd.js",
    "static": true,
    "longname": "lib/reporters/pmd.js~util",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/pmd.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "path",
    "memberof": "lib/reporters/pmd.js",
    "static": true,
    "longname": "lib/reporters/pmd.js~path",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/pmd.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "chalk",
    "memberof": "lib/reporters/pmd.js",
    "static": true,
    "longname": "lib/reporters/pmd.js~chalk",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/pmd.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "BaseReporter",
    "memberof": "lib/reporters/pmd.js",
    "static": true,
    "longname": "lib/reporters/pmd.js~BaseReporter",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/pmd.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "PMDReporter",
    "memberof": "lib/reporters/pmd.js",
    "static": true,
    "longname": "lib/reporters/pmd.js~PMDReporter",
    "access": "public",
    "export": false,
    "importPath": "jsinspect/lib/reporters/pmd.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "BaseReporter"
    ]
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/reporters/pmd.js~PMDReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/pmd.js~PMDReporter#constructor",
    "access": "public",
    "description": "A PMD CPD XML reporter, which tries to fit jsinspect's output to something\nCI tools might expect from PMD.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Inspector"
        ],
        "spread": false,
        "optional": false,
        "name": "inspector",
        "description": "Instance on which to register its listeners"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "Options to set for the reporter"
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "_getOutput",
    "memberof": "lib/reporters/pmd.js~PMDReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/pmd.js~PMDReporter#_getOutput",
    "access": "private",
    "description": "Returns an XML string containing a <duplication> element, with <file>\nchildren indicating the instance locations, and <codefragment> to hold the\nlines.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The formatted output"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Match"
        ],
        "spread": false,
        "optional": false,
        "name": "match",
        "description": "The inspector match to output"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The formatted output"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "_getTotalLines",
    "memberof": "lib/reporters/pmd.js~PMDReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/pmd.js~PMDReporter#_getTotalLines",
    "access": "private",
    "description": "Returns the total number of lines spanned by a match.",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{int}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Match"
        ],
        "spread": false,
        "optional": false,
        "name": "match",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "int"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_getFile",
    "memberof": "lib/reporters/pmd.js~PMDReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/pmd.js~PMDReporter#_getFile",
    "access": "private",
    "description": "Returns an XML string containing the path to the file in which the instance\nis located, as well as its starting line. Absolute paths are required for\nJenkins.",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "_escape",
    "memberof": "lib/reporters/pmd.js~PMDReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/reporters/pmd.js~PMDReporter#_escape",
    "access": "private",
    "description": "Returns an escaped string for use within XML.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The escaped string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "The string to escape"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The escaped string"
    }
  },
  {
    "kind": "index",
    "content": "![jsinspect](http://danielstjules.com/github/jsinspect-logo.png)\n\nDetect copy-pasted and structurally similar JavaScript code. Requires Node.js\n6.0+, and supports ES6, JSX as well as Flow. Note: the project has been mostly\nrewritten for the 0.10 release and saw several breaking changes.\n\n[![Build Status](https://travis-ci.org/danielstjules/jsinspect.svg?branch=master)](https://travis-ci.org/danielstjules/jsinspect)\n\n* [Overview](#overview)\n* [Installation](#installation)\n* [Usage](#usage)\n* [Integration](#integration)\n* [Reporters](#reporters)\n\n## Overview\n\nWe've all had to deal with code smell, and duplicate code is a common source.\nWhile some instances are easy to spot, this type of searching is the perfect\nuse-case for a helpful CLI tool.\n\nExisting solutions do exist for this purpose, but some struggle with code\nthat has wildly varying identifiers or literals, and others have lackluster\nsupport for the JS ecosystem: ES6, JSX, Flow, ignoring module declarations\nand imports, etc.\n\nAnd copy-pasted code is but one type of code duplication. Common boilerplate\nand repeated logic can be identified as well using jsinspect, since it\ndoesn't operate directly on tokens - it uses the ASTs of the parsed code.\n\nYou have the freedom to specify a threshold determining the smallest subset of\nnodes to analyze. This will identify code with a similar structure, based\non the AST node types, e.g. BlockStatement, VariableDeclaration,\nObjectExpression, etc. By default, it searches nodes with matching identifiers\nand literals for copy-paste oriented detection, but this can be disabled.\nFor context, identifiers include the names of variables, methods, properties,\netc, while literals are strings, numbers, etc.\n\nThe tool accepts a list of paths to parse and prints any found matches. Any\ndirectories among the paths are walked recursively, and only `.js` and `.jsx`\nfiles are analyzed. You can explicitly pass file paths that include a different\nextension as well. Any `node_modules` and `bower_components` dirs are also\nignored.\n\n![screenshot](https://cloud.githubusercontent.com/assets/817212/24126139/bd151a34-0da2-11e7-94a8-9742279c8566.png)\n\n## Installation\n\nIt can be installed via `npm` using:\n\n``` bash\nnpm install -g jsinspect\n```\n\n## Usage\n\n```\nUsage: jsinspect [options] <paths ...>\n\n\nDetect copy-pasted and structurally similar JavaScript code\nExample use: jsinspect -I -L -t 20 --ignore \"test\" ./path/to/src\n\n\nOptions:\n\n  -h, --help                         output usage information\n  -V, --version                      output the version number\n  -t, --threshold <number>           number of nodes (default: 30)\n  -m, --min-instances <number>       min instances for a match (default: 2)\n  -c, --config [config]              path to config file (default: .jsinspectrc)\n  -r, --reporter [default|json|pmd]  specify the reporter to use\n  -I, --no-identifiers               do not match identifiers\n  -L, --no-literals                  do not match literals\n  -C, --no-color                     disable colors\n  --ignore <pattern>                 ignore paths matching a regex\n  --truncate <number>                length to truncate lines (default: 100, off: 0)\n  --debug                            print debug information\n```\n\nIf a `.jsinspectrc` file is located in the project directory, its values will\nbe used in place of the defaults listed above. For example:\n\n``` javascript\n{\n  \"threshold\":     30,\n  \"identifiers\":   true,\n  \"literals\":      true,\n  \"color\":         true,\n  \"minInstances\":  2,\n  \"ignore\":        \"test|spec|mock\",\n  \"reporter\":      \"json\",\n  \"truncate\":      100,\n}\n```\n\nOn first use with a project, you may want to run the tool with the following\noptions, while running explicitly on the lib/src directories, and not the\ntest/spec dir.\n\n```\njsinspect -t 50 --ignore \"test\" ./path/to/src\n```\n\nFrom there, feel free to try decreasing the threshold, ignoring identifiers\nusing the `-I` flag and ignoring literals with `-L`. A lower threshold may lead\nyou to discover new areas of interest for refactoring or cleanup.\n\n## Integration\n\nIt's simple to run jsinspect on your library source as part of a build\nprocess. It will exit with an error code of 0 when no matches are found,\nresulting in a passing step, and a positive error code corresponding to its\nfailure. For example, with Travis CI, you could add the following entries\nto your `.travis.yml`:\n\n``` yaml\nbefore_script:\n  - \"npm install -g jsinspect\"\n\nscript:\n  - \"jsinspect ./path/to/src\"\n```\n\nNote that in the above example, we're using a threshold of 30 for detecting\nstructurally similar code. A higher threshold may be appropriate as well.\n\nTo have jsinspect run with each job, but not block or fail the build, you can\nuse something like the following:\n\n``` yaml\nscript:\n  - \"jsinspect ./path/to/src || true\"\n```\n\n## Reporters\n\nAside from the default reporter, both JSON and PMD CPD-style XML reporters are\navailable. Note that in the JSON example below, indentation and formatting\nhas been applied. Furthermore, the id property available in these reporters is\nuseful for parsing by automatic scripts to determine whether or not duplicate\ncode has changed between builds.\n\n#### JSON\n\n``` json\n[{\n  \"id\":\"6ceb36d5891732db3835c4954d48d1b90368a475\",\n  \"instances\":[\n    {\n      \"path\":\"spec/fixtures/intersection.js\",\n      \"lines\":[1,5],\n      \"code\":\"function intersectionA(array1, array2) {\\n  array1.filter(function(n) {\\n    return array2.indexOf(n) != -1;\\n  });\\n}\"\n    },\n    {\n      \"path\":\"spec/fixtures/intersection.js\",\n      \"lines\":[7,11],\n      \"code\":\"function intersectionB(arrayA, arrayB) {\\n  arrayA.filter(function(n) {\\n    return arrayB.indexOf(n) != -1;\\n  });\\n}\"\n    }\n  ]\n}]\n```\n\n#### PMD CPD XML\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<pmd-cpd>\n<duplication lines=\"10\" id=\"6ceb36d5891732db3835c4954d48d1b90368a475\">\n<file path=\"/jsinspect/spec/fixtures/intersection.js\" line=\"1\"/>\n<file path=\"/jsinspect/spec/fixtures/intersection.js\" line=\"7\"/>\n<codefragment>\nspec/fixtures/intersection.js:1,5\nfunction intersectionA(array1, array2) {\n  array1.filter(function(n) {\n    return array2.indexOf(n) != -1;\n  });\n}\n\nspec/fixtures/intersection.js:7,11\nfunction intersectionB(arrayA, arrayB) {\n  arrayA.filter(function(n) {\n    return arrayB.indexOf(n) != -1;\n  });\n}\n</codefragment>\n</duplication>\n</pmd-cpd>\n```\n",
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"jsinspect\",\n  \"version\": \"0.12.7\",\n  \"description\": \"Detect structural similarities in your code\",\n  \"keywords\": [\n    \"inspect\",\n    \"detect\",\n    \"code\",\n    \"duplicate\",\n    \"structure\",\n    \"copy\",\n    \"paste\"\n  ],\n  \"author\": \"Daniel St. Jules <danielst.jules@gmail.com>\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/danielstjules/jsinspect\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/danielstjules/jsinspect.git\"\n  },\n  \"dependencies\": {\n    \"babylon\": \"6.16.1\",\n    \"chalk\": \"^2.1.0\",\n    \"commander\": \"^2.11.0\",\n    \"filepaths\": \"0.3.0\",\n    \"stable\": \"^0.1.6\",\n    \"strip-indent\": \"^1.0.1\",\n    \"strip-json-comments\": \"1.0.2\"\n  },\n  \"devDependencies\": {\n    \"concat-stream\": \"^1.5.0\",\n    \"dirmap\": \"^0.0.2\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"expect.js\": \"^0.3.1\",\n    \"mocha\": \"^3.5.0\"\n  },\n  \"bin\": {\n    \"jsinspect\": \"./bin/jsinspect\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha -R spec spec spec/reporters\",\n    \"docs\": \"./node_modules/.bin/esdoc\",\n    \"docs-open\": \"npm run docs && open docs/index.html\"\n  }\n}\n",
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 160,
    "kind": "testFile",
    "name": "spec/inspectorSpec.js",
    "content": "var expect       = require('expect.js');\nvar EventEmitter = require('events').EventEmitter;\nvar Inspector    = require('../lib/inspector');\nvar fixtures     = require('./fixtures');\n\ndescribe('Inspector', function() {\n  // Used to test emitted events\n  var found;\n  var listener = function(match) {\n    found.push(match);\n  };\n\n  beforeEach(function() {\n    found = [];\n  });\n\n  describe('constructor', function() {\n    it('inherits from EventEmitter', function() {\n      expect(new Inspector()).to.be.an(EventEmitter);\n    });\n\n    it('accepts an array of file paths', function() {\n      var filePaths = ['path1.js', 'path2.js'];\n      var inspector = new Inspector(filePaths);\n      expect(inspector._filePaths).to.be(filePaths);\n    });\n\n    it('assigns a default threshold of 30', function() {\n      var inspector = new Inspector([]);\n      expect(inspector._threshold).to.be(30);\n    });\n\n    it('accepts an options object', function() {\n      var opts = {threshold: 12};\n      var inspector = new Inspector([], opts);\n      expect(inspector._threshold).to.be(opts.threshold);\n    });\n  });\n\n  describe('run', function() {\n    it('emits a start event', function() {\n      var emitted;\n      var inspector = new Inspector([fixtures.intersection]);\n      inspector.on('start', function() {\n        emitted = true;\n      });\n\n      inspector.run();\n      expect(emitted).to.be(true);\n    });\n\n    it('emits an end event', function() {\n      var emitted;\n      var inspector = new Inspector([fixtures.intersection]);\n      inspector.on('end', function() {\n        emitted = true;\n      });\n\n      inspector.run();\n      expect(emitted).to.be(true);\n    });\n\n    it('emits the \"match\" event when a match is found', function() {\n      var inspector = new Inspector([fixtures.intersection], {\n        threshold: 10\n      });\n\n      inspector.on('match', listener);\n      inspector.run();\n      expect(found).to.have.length(1);\n    });\n  });\n\n  it('can find an exact match between instances', function() {\n    var inspector = new Inspector([fixtures.intersection], {\n      threshold: 15\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 1, column: 0});\n    expect(match.instances[0].end).to.eql({line: 5, column: 1});\n    expect(match.instances[1].start).to.eql({line: 7, column: 0});\n    expect(match.instances[1].end).to.eql({line: 11, column: 1});\n  });\n\n  it('can find the largest match between two instances', function() {\n    var inspector = new Inspector([fixtures.redundantIntersection], {\n      threshold: 11\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 1, column: 0});\n    expect(match.instances[0].end).to.eql({line: 9, column: 1});\n    expect(match.instances[1].start).to.eql({line: 11, column: 0});\n    expect(match.instances[1].end).to.eql({line: 19, column: 1});\n  });\n\n  it('supports ES6', function() {\n    var inspector = new Inspector([fixtures.es6ClassExport], {\n      threshold: 20\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 2, column: 2});\n    expect(match.instances[0].end).to.eql({line: 6, column: 3});\n    expect(match.instances[1].start).to.eql({line: 8, column: 2});\n    expect(match.instances[1].end).to.eql({line: 12, column: 3});\n  });\n\n  it('supports JSX', function() {\n    var inspector = new Inspector([fixtures.jsxTodo], {\n      threshold: 20\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 3, column: 0});\n    expect(match.instances[0].end).to.eql({line: 9, column: 1});\n    expect(match.instances[1].start).to.eql({line: 11, column: 0});\n    expect(match.instances[1].end).to.eql({line: 17, column: 1});\n  });\n\n  it('supports Flow', function() {\n    var inspector = new Inspector([fixtures.flowIntersection], {\n      threshold: 20\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 1, column: 0});\n    expect(match.instances[0].end).to.eql({line: 5, column: 1});\n    expect(match.instances[1].start).to.eql({line: 7, column: 0});\n    expect(match.instances[1].end).to.eql({line: 11, column: 1});\n  });\n\n  it('includes the lines with the match', function() {\n    var inspector = new Inspector([fixtures.intersection], {\n      threshold: 11,\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].lines).to.be(\n      'function intersectionA(array1, array2) {\\n' +\n      '  array1.filter(function(n) {\\n' +\n      '    return array2.indexOf(n) != -1;\\n' +\n      '  });\\n' +\n      '}'\n    );\n    expect(match.instances[1].lines).to.be(\n      'function intersectionB(arrayA, arrayB) {\\n' +\n      '  arrayA.filter(function(n) {\\n' +\n      '    return arrayB.indexOf(n) != -1;\\n' +\n      '  });\\n' +\n      '}'\n    );\n  });\n\n  it('ignores matches with less than the supplied minimum', function() {\n    var inspector = new Inspector([fixtures.matches], {\n      threshold: 2,\n      minInstances: 3\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n    expect(found).to.have.length(1);\n    expect(found[0].instances).to.have.length(3);\n  });\n\n  it('ignores CommonJS require statements', function() {\n    var inspector = new Inspector([fixtures.commonjs], {\n      threshold: 3\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n    expect(found).to.have.length(0);\n  });\n\n  it('ignores AMD define expressions', function() {\n    var inspector = new Inspector([fixtures.amd], {\n      threshold: 5\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n    expect(found).to.have.length(0);\n  });\n});\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/spec/inspectorSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/inspectorSpec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0",
    "access": null,
    "description": "Inspector",
    "lineNumber": 6
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.describe1",
    "access": null,
    "description": "constructor",
    "lineNumber": 17
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "spec/inspectorSpec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.describe1.it2",
    "access": null,
    "description": "inherits from EventEmitter",
    "lineNumber": 18
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/inspectorSpec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.describe1.it3",
    "access": null,
    "description": "accepts an array of file paths",
    "lineNumber": 22
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "spec/inspectorSpec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.describe1.it4",
    "access": null,
    "description": "assigns a default threshold of 30",
    "lineNumber": 28
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "spec/inspectorSpec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.describe1.it5",
    "access": null,
    "description": "accepts an options object",
    "lineNumber": 33
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.describe6",
    "access": null,
    "description": "run",
    "lineNumber": 40
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "spec/inspectorSpec.js~describe0.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.describe6.it7",
    "access": null,
    "description": "emits a start event",
    "lineNumber": 41
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "spec/inspectorSpec.js~describe0.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.describe6.it8",
    "access": null,
    "description": "emits an end event",
    "lineNumber": 52
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "spec/inspectorSpec.js~describe0.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.describe6.it9",
    "access": null,
    "description": "emits the \"match\" event when a match is found",
    "lineNumber": 63
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.it10",
    "access": null,
    "description": "can find an exact match between instances",
    "lineNumber": 74
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.it11",
    "access": null,
    "description": "can find the largest match between two instances",
    "lineNumber": 91
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.it12",
    "access": null,
    "description": "supports ES6",
    "lineNumber": 108
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.it13",
    "access": null,
    "description": "supports JSX",
    "lineNumber": 125
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.it14",
    "access": null,
    "description": "supports Flow",
    "lineNumber": 142
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.it15",
    "access": null,
    "description": "includes the lines with the match",
    "lineNumber": 159
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.it16",
    "access": null,
    "description": "ignores matches with less than the supplied minimum",
    "lineNumber": 186
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.it17",
    "access": null,
    "description": "ignores CommonJS require statements",
    "lineNumber": 198
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "spec/inspectorSpec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/inspectorSpec.js~describe0.it18",
    "access": null,
    "description": "ignores AMD define expressions",
    "lineNumber": 208
  },
  {
    "__docId__": 180,
    "kind": "testFile",
    "name": "spec/matchSpec.js",
    "content": "var expect    = require('expect.js');\nvar Match     = require('../lib/match');\nvar fixtures  = require('./fixtures');\nvar NodeUtils = require('../lib/nodeUtils');\nvar crypto    = require('crypto');\n\ndescribe('Match', function() {\n  var nodeArrays = [\n    [{\n      type: 'BlockStatement',\n      loc: {filename: 'a', start: {line: 1, column: 0}, end: {line: 2, column: 3}}\n    }],\n    [{\n      type: 'Literal',\n      loc: {filename: 'a', start: {line: 3, column: 0}, end: {line: 3, column: 3}}\n    }]\n  ];\n\n  it('has a hash based on the node types', function() {\n    var match = new Match(nodeArrays);\n    var str = 'BlockStatement:Literal';\n    var sha1 = crypto.createHash('sha1').update(str).digest('hex');\n    expect(match.hash).to.be(sha1);\n  });\n\n  it('stores instance objects containing filename, start and end', function() {\n    var match = new Match(nodeArrays);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0]).to.eql(nodeArrays[0][0].loc);\n  });\n\n  it('uses the minimum start value of nodes in an instance', function() {\n    var match = new Match([[\n      {\n        type: 'a',\n        loc: {filename: 'a', start: {line: 2, column: 0}, end: {line: 2, column: 0}}\n      },\n      {\n        type: 'a',\n        loc: {filename: 'a', start: {line: 1, column: 2}, end: {line: 1, column: 2}}\n      },\n      {\n        type: 'a',\n        loc: {filename: 'a', start: {line: 1, column: 0}, end: {line: 1, column: 0}}\n      },\n      {\n        type: 'a',\n        loc: {filename: 'a', start: {line: 3, column: 0}, end: {line: 3, column: 0}}\n      }\n    ]]);\n    expect(match.instances[0].start).to.eql({line: 1, column: 0});\n  });\n\n  describe('populateLines', function() {\n    it('adds the relevant source lines as a prop to each instance', function() {\n      var match = new Match(nodeArrays);\n      match.populateLines({\n        a: ['foo', 'bar', 'baz']\n      });\n      expect(match.instances[0].lines).to.eql('foo\\nbar');\n      expect(match.instances[1].lines).to.eql('baz');\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/spec/matchSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "spec/matchSpec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/matchSpec.js~describe19",
    "access": null,
    "description": "Match",
    "lineNumber": 7
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/matchSpec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/matchSpec.js~describe19.it20",
    "access": null,
    "description": "has a hash based on the node types",
    "lineNumber": 19
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "spec/matchSpec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/matchSpec.js~describe19.it21",
    "access": null,
    "description": "stores instance objects containing filename, start and end",
    "lineNumber": 26
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "spec/matchSpec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/matchSpec.js~describe19.it22",
    "access": null,
    "description": "uses the minimum start value of nodes in an instance",
    "lineNumber": 32
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "spec/matchSpec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "spec/matchSpec.js~describe19.describe23",
    "access": null,
    "description": "populateLines",
    "lineNumber": 54
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "spec/matchSpec.js~describe19.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "spec/matchSpec.js~describe19.describe23.it24",
    "access": null,
    "description": "adds the relevant source lines as a prop to each instance",
    "lineNumber": 55
  },
  {
    "__docId__": 187,
    "kind": "testFile",
    "name": "spec/nodeUtilsSpec.js",
    "content": "var expect    = require('expect.js');\nvar fixtures  = require('./fixtures');\nvar helpers   = require('./helpers');\nvar NodeUtils = require('../lib/nodeUtils');\n\ndescribe('NodeUtils', function() {\n  describe('walkSubtrees', function() {\n    it('walks each child node using DFS', function() {\n      var res = [];\n      var root = helpers.parse(fixtures.simple)[0];\n      NodeUtils.walkSubtrees(root, node => res.push(node.type));\n      expect(res).to.eql([\n        'ExpressionStatement',\n        'UpdateExpression',\n        'Identifier',\n        'ExpressionStatement',\n        'CallExpression',\n        'Identifier'\n      ]);\n    });\n  });\n\n  describe('getDFSTraversal', function() {\n    it('returns the DFS traversal of the AST', function() {\n      var res = [];\n      var ast = helpers.parse(fixtures.simple)[0];\n      var res = NodeUtils.getDFSTraversal(ast).map(node => node.type);\n      expect(res).to.eql([\n        'BlockStatement',\n        'ExpressionStatement',\n        'UpdateExpression',\n        'Identifier',\n        'ExpressionStatement',\n        'CallExpression',\n        'Identifier'\n      ]);\n    });\n  });\n\n  describe('getBFSTraversal', function() {\n    it('returns the BFS traversal of the AST', function() {\n      var res = [];\n      var ast = helpers.parse(fixtures.simple)[0];\n      var res = NodeUtils.getBFSTraversal(ast).map(node => node.type);\n      expect(res).to.eql([\n        'BlockStatement',\n        'ExpressionStatement',\n        'ExpressionStatement',\n        'UpdateExpression',\n        'CallExpression',\n        'Identifier',\n        'Identifier'\n      ]);\n    });\n  });\n\n  describe('getChildren', function() {\n    it('returns the children of a Node', function() {\n      var parent = helpers.parse(fixtures.intersection)[0];\n      var res = NodeUtils.getChildren(parent);\n      // Children should be the three identifiers intersectionA,\n      // array1, and array2, followed by a block statement\n      expect(res.map(node => node.type)).to.eql([\n        'Identifier',\n        'Identifier',\n        'Identifier',\n        'BlockStatement'\n      ])\n    });\n\n    it('ignores null children', function() {\n      var parent = helpers.parse(fixtures.nullChildren)[1].expression.left;\n      // parent.elements is an array with a leading null that should be ignored,\n      // followed by an identifier\n      var res = NodeUtils.getChildren(parent);\n      expect(res).to.have.length(1);\n      expect(res[0].type).to.be('Identifier');\n    });\n\n    it('ignores empty JSXText nodes', function() {\n      var parent = helpers.parse(fixtures.jsxNesting)[0].expression;\n      var res = NodeUtils.getChildren(parent);\n      res.forEach(node => expect(node.type).not.to.be('JSXText'));\n    });\n  });\n\n  describe('isBefore', function() {\n    describe('given nodes with different line numbers', function() {\n      it('returns true if the first node has a lower line number', function() {\n        var res = NodeUtils.isBefore(\n          {loc: {start: {line: 0, column: 0}}},\n          {loc: {start: {line: 1, column: 0}}}\n        );\n        expect(res).to.be(true);\n      });\n\n      it('returns false if the first node has a higher numbered line', function() {\n        var res = NodeUtils.isBefore(\n          {loc: {start: {line: 1, column: 0}}},\n          {loc: {start: {line: 0, column: 0}}}\n        );\n        expect(res).to.be(false);\n      });\n    });\n\n    describe('given nodes with the same line number', function() {\n      it('returns true if the first node has a lower column number', function() {\n        var res = NodeUtils.isBefore(\n          {loc: {start: {line: 0, column: 0}}},\n          {loc: {start: {line: 0, column: 1}}}\n        );\n        expect(res).to.be(true);\n      });\n\n      it('returns false if the first node has a higher column number', function() {\n        var res = NodeUtils.isBefore(\n          {loc: {start: {line: 0, column: 1}}},\n          {loc: {start: {line: 0, column: 0}}}\n        );\n        expect(res).to.be(false);\n      });\n    });\n  });\n\n  describe('isES6ModuleImport', function() {\n    it('returns true for an import declaration', function() {\n      // ImportDeclaration\n      var nodes = [helpers.parse(fixtures.es6Module)[0]];\n      expect(NodeUtils.isES6ModuleImport(nodes)).to.be(true);\n    });\n\n    it('returns false for export declaration', function() {\n      // ExportNamedDeclaration\n      var nodes = [helpers.parse(fixtures.es6Module)[1]];\n      expect(NodeUtils.isES6ModuleImport(nodes)).to.be(false);\n    });\n\n    it('returns false otherwise', function() {\n      var nodes = helpers.parse(fixtures.commonjs);\n      expect(NodeUtils.isES6ModuleImport(nodes)).to.be(false);\n    });\n  });\n\n  describe('isAMD', function() {\n    it('returns true for an expression containing a define', function() {\n      // First expression is define\n      var nodes = [helpers.parse(fixtures.amd)[0]];\n      expect(NodeUtils.isAMD(nodes)).to.be(true);\n    });\n\n    it('returns true for an expression containing a define', function() {\n      // Third expression is require\n      var nodes = [helpers.parse(fixtures.amd)[2]];\n      expect(NodeUtils.isAMD(nodes)).to.be(true);\n    });\n\n    it('returns true even if the function is a property', function() {\n      var nodes = [helpers.parse(fixtures.amd)[4]];\n      expect(NodeUtils.isAMD(nodes)).to.be(true);\n    });\n\n    it('returns true even if a nested property', function() {\n      var nodes = [helpers.parse(fixtures.amd)[6]];\n      expect(NodeUtils.isAMD(nodes)).to.be(true);\n    });\n\n    it('returns false otherwise', function() {\n      var nodes = helpers.parse(fixtures.commonjs);\n      expect(NodeUtils.isAMD(nodes)).to.be(false);\n    });\n  });\n\n  describe('isCommonJS', function() {\n    it('returns true for an expression containing a require', function() {\n      // First node is an ExpressionStatement\n      var nodes = [helpers.parse(fixtures.commonjs)[0]];\n      expect(NodeUtils.isCommonJS(nodes)).to.be(true);\n    });\n\n    it('returns true for a declaration containing a require', function() {\n      // Second node is a VariableDeclaration\n      var nodes = [helpers.parse(fixtures.commonjs)[1]];\n      expect(NodeUtils.isCommonJS(nodes)).to.be(true);\n    });\n\n    it('returns false otherwise', function() {\n      var nodes = helpers.parse(fixtures.amd);\n      expect(NodeUtils.isCommonJS(nodes)).to.be(false);\n    });\n  });\n\n  describe('typesMatch', function() {\n    it('returns true if all node types match', function() {\n      var res = NodeUtils.typesMatch([\n        {type: 'a'}, {type: 'a'}, {type: 'a'}\n      ]);\n      expect(res).to.be(true);\n    });\n\n    it('returns false if not all node types match', function() {\n      var res = NodeUtils.typesMatch([\n        {type: 'a'}, {type: 'a'}, {type: 'b'}\n      ]);\n      expect(res).to.be(false);\n    });\n  });\n\n  describe('identifiersMatch', function() {\n    it('returns true if all node are matching identifiers', function() {\n      var res = NodeUtils.identifiersMatch([\n        {name: 'a'}, {name: 'a'}, {name: 'a'}\n      ]);\n      expect(res).to.be(true);\n    });\n\n    it('returns false if not all node names match', function() {\n      var res = NodeUtils.identifiersMatch([\n        {name: 'a'}, {name: 'a'}, {name: 'b'}\n      ]);\n      expect(res).to.be(false);\n    });\n  });\n\n  describe('literalsMatch', function() {\n    it('returns true if all literals have the same value', function() {\n      var res = NodeUtils.literalsMatch([\n        {type: 'Literal', value: 'a'},\n        {type: 'Literal', value: 'a'},\n        {type: 'Literal', value: 'a'}\n      ]);\n      expect(res).to.be(true);\n    });\n\n    it('returns false if not all literals have the same value', function() {\n      var res = NodeUtils.literalsMatch([\n        {type: 'Literal', value: 'a'},\n        {type: 'Literal', value: 'a'},\n        {type: 'Literal', value: 'b'}\n      ]);\n      expect(res).to.be(false);\n    });\n\n    it('treats JSXText as a literal', function() {\n      var res = NodeUtils.literalsMatch([\n        {type: 'JSXText', value: 'a'},\n        {type: 'JSXText', value: 'a'},\n        {type: 'JSXText', value: 'b'}\n      ]);\n      expect(res).to.be(false);\n    });\n\n    it('ignores the values of nodes which are not literals', function() {\n      var res = NodeUtils.literalsMatch([\n        {type: 'Foo', value: 'a'},\n        {type: 'Foo', value: 'a'},\n        {type: 'Foo', value: 'b'}\n      ]);\n      expect(res).to.be(true);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/spec/nodeUtilsSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "spec/nodeUtilsSpec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25",
    "access": null,
    "description": "NodeUtils",
    "lineNumber": 6
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe26",
    "access": null,
    "description": "walkSubtrees",
    "lineNumber": 7
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe26.it27",
    "access": null,
    "description": "walks each child node using DFS",
    "lineNumber": 8
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe28",
    "access": null,
    "description": "getDFSTraversal",
    "lineNumber": 23
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe28.it29",
    "access": null,
    "description": "returns the DFS traversal of the AST",
    "lineNumber": 24
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe30",
    "access": null,
    "description": "getBFSTraversal",
    "lineNumber": 40
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe30.it31",
    "access": null,
    "description": "returns the BFS traversal of the AST",
    "lineNumber": 41
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe32",
    "access": null,
    "description": "getChildren",
    "lineNumber": 57
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe32.it33",
    "access": null,
    "description": "returns the children of a Node",
    "lineNumber": 58
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe32.it34",
    "access": null,
    "description": "ignores null children",
    "lineNumber": 71
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe32.it35",
    "access": null,
    "description": "ignores empty JSXText nodes",
    "lineNumber": 80
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe36",
    "access": null,
    "description": "isBefore",
    "lineNumber": 87
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe36.describe37",
    "access": null,
    "description": "given nodes with different line numbers",
    "lineNumber": 88
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe36.describe37",
    "testDepth": 3,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe36.describe37.it38",
    "access": null,
    "description": "returns true if the first node has a lower line number",
    "lineNumber": 89
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe36.describe37",
    "testDepth": 3,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe36.describe37.it39",
    "access": null,
    "description": "returns false if the first node has a higher numbered line",
    "lineNumber": 97
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "describe40",
    "testId": 40,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe36.describe40",
    "access": null,
    "description": "given nodes with the same line number",
    "lineNumber": 106
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe36.describe40",
    "testDepth": 3,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe36.describe40.it41",
    "access": null,
    "description": "returns true if the first node has a lower column number",
    "lineNumber": 107
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe36.describe40",
    "testDepth": 3,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe36.describe40.it42",
    "access": null,
    "description": "returns false if the first node has a higher column number",
    "lineNumber": 115
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe43",
    "access": null,
    "description": "isES6ModuleImport",
    "lineNumber": 125
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe43.it44",
    "access": null,
    "description": "returns true for an import declaration",
    "lineNumber": 126
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe43.it45",
    "access": null,
    "description": "returns false for export declaration",
    "lineNumber": 132
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe43.it46",
    "access": null,
    "description": "returns false otherwise",
    "lineNumber": 138
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe47",
    "access": null,
    "description": "isAMD",
    "lineNumber": 144
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe47.it48",
    "access": null,
    "description": "returns true for an expression containing a define",
    "lineNumber": 145
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe47.it49",
    "access": null,
    "description": "returns true for an expression containing a define",
    "lineNumber": 151
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe47.it50",
    "access": null,
    "description": "returns true even if the function is a property",
    "lineNumber": 157
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe47.it51",
    "access": null,
    "description": "returns true even if a nested property",
    "lineNumber": 162
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe47.it52",
    "access": null,
    "description": "returns false otherwise",
    "lineNumber": 167
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "describe53",
    "testId": 53,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe53",
    "access": null,
    "description": "isCommonJS",
    "lineNumber": 173
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe53",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe53.it54",
    "access": null,
    "description": "returns true for an expression containing a require",
    "lineNumber": 174
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe53",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe53.it55",
    "access": null,
    "description": "returns true for a declaration containing a require",
    "lineNumber": 180
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe53",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe53.it56",
    "access": null,
    "description": "returns false otherwise",
    "lineNumber": 186
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "describe57",
    "testId": 57,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe57",
    "access": null,
    "description": "typesMatch",
    "lineNumber": 192
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe57",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe57.it58",
    "access": null,
    "description": "returns true if all node types match",
    "lineNumber": 193
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe57",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe57.it59",
    "access": null,
    "description": "returns false if not all node types match",
    "lineNumber": 200
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe60",
    "access": null,
    "description": "identifiersMatch",
    "lineNumber": 208
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe60.it61",
    "access": null,
    "description": "returns true if all node are matching identifiers",
    "lineNumber": 209
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe60.it62",
    "access": null,
    "description": "returns false if not all node names match",
    "lineNumber": 216
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "spec/nodeUtilsSpec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe63",
    "access": null,
    "description": "literalsMatch",
    "lineNumber": 224
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe63.it64",
    "access": null,
    "description": "returns true if all literals have the same value",
    "lineNumber": 225
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe63.it65",
    "access": null,
    "description": "returns false if not all literals have the same value",
    "lineNumber": 234
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe63.it66",
    "access": null,
    "description": "treats JSXText as a literal",
    "lineNumber": 243
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "spec/nodeUtilsSpec.js~describe25.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "spec/nodeUtilsSpec.js~describe25.describe63.it67",
    "access": null,
    "description": "ignores the values of nodes which are not literals",
    "lineNumber": 252
  },
  {
    "__docId__": 231,
    "kind": "testFile",
    "name": "spec/parserSpec.js",
    "content": "var expect  = require('expect.js');\nvar helpers = require('./helpers');\nvar Parser  = require('../lib/parser');\n\ndescribe('parse', function() {\n  describe('on error', function() {\n    var src = '[_, = [1, 2, 3];';\n    var filePath = 'broken.js';\n\n    it('includes the filename of the file that failed to parse', function() {\n      var fn = () => Parser.parse(src, filePath);\n      expect(fn).to.throwException((err) => {\n        expect(err.message).to.contain(filePath);\n      });\n    });\n\n    it('includes a caret pointing to the unexpected token', function() {\n      var fn = () => Parser.parse(src, filePath);\n      expect(fn).to.throwException((err) => {\n        expect(err.message).to.contain(`${src}\\n    ^`);\n      });\n    });\n\n    it('does not include the src line if longer than 100 chars', function() {\n      var src = ' '.repeat(100) + ']';\n      var fn = () => Parser.parse(src, filePath);\n      expect(fn).to.throwException((err) => {\n        expect(err.message).not.to.contain(`^`);\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/spec/parserSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "spec/parserSpec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/parserSpec.js~describe68",
    "access": null,
    "description": "parse",
    "lineNumber": 5
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "spec/parserSpec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "spec/parserSpec.js~describe68.describe69",
    "access": null,
    "description": "on error",
    "lineNumber": 6
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "spec/parserSpec.js~describe68.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "spec/parserSpec.js~describe68.describe69.it70",
    "access": null,
    "description": "includes the filename of the file that failed to parse",
    "lineNumber": 10
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "spec/parserSpec.js~describe68.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "spec/parserSpec.js~describe68.describe69.it71",
    "access": null,
    "description": "includes a caret pointing to the unexpected token",
    "lineNumber": 17
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "spec/parserSpec.js~describe68.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "spec/parserSpec.js~describe68.describe69.it72",
    "access": null,
    "description": "does not include the src line if longer than 100 chars",
    "lineNumber": 24
  },
  {
    "__docId__": 237,
    "kind": "testFile",
    "name": "spec/reporters/baseSpec.js",
    "content": "var expect       = require('expect.js');\nvar util         = require('util');\nvar chalk        = require('chalk');\nvar fixtures     = require('../fixtures');\nvar helpers      = require('../helpers');\nvar BaseReporter = require('../../lib/reporters/base');\nvar Inspector    = require('../../lib/inspector');\n\n// A simple TestReporter for testing the BaseReporter\nclass TestReporter extends BaseReporter {\n  constructor(inspector) {\n    super(inspector);\n    this._registerSummary();\n  }\n\n  _getOutput() {}\n}\n\ndescribe('BaseReporter', function() {\n  var inspector, reporter;\n\n  beforeEach(function() {\n    helpers.captureOutput();\n    inspector = new Inspector([fixtures.intersection], {\n      threshold: 15\n    });\n    reporter = new TestReporter(inspector);\n  });\n\n  afterEach(function() {\n    helpers.restoreOutput();\n  });\n\n  describe('constructor', function() {\n    it('accepts an inspector as an argument', function() {\n      expect(reporter._inspector).to.be(inspector);\n    });\n\n    it('registers a listener for the match event', function() {\n      expect(inspector.listeners('match')).to.have.length(1);\n    });\n  });\n\n  describe('given a match', function() {\n    it('increments the number found', function() {\n      inspector.emit('match', {});\n      helpers.restoreOutput();\n      expect(reporter._found).to.be(1);\n    });\n\n    it('invokes _getOutput', function() {\n      reporter._getOutput = function(match) {\n        return match;\n      };\n\n      inspector.emit('match', 'invoked');\n      helpers.restoreOutput();\n      expect(helpers.getOutput()).to.be('invoked');\n    });\n  });\n\n  describe('summary', function() {\n    it('can be printed on inspector end', function() {\n      inspector.run();\n      helpers.restoreOutput();\n      expect(helpers.getOutput()).to.not.be(null);\n    });\n\n    it('prints the correct results if no matches were found', function() {\n      inspector = new Inspector([fixtures.intersection], {\n        threshold: 40\n      });\n      var reporter = new TestReporter(inspector);\n\n      inspector.run();\n      helpers.restoreOutput();\n      expect(helpers.getOutput()).to.be('\\nNo matches found across 1 file\\n');\n    });\n\n    it('prints the correct results if matches were found', function() {\n      inspector.run();\n      helpers.restoreOutput();\n      expect(helpers.getOutput()).to.be('\\n1 match found across 1 file\\n');\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/spec/reporters/baseSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "spec/reporters/baseSpec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73",
    "access": null,
    "description": "BaseReporter",
    "lineNumber": 19
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "spec/reporters/baseSpec.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe74",
    "access": null,
    "description": "constructor",
    "lineNumber": 34
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "spec/reporters/baseSpec.js~describe73.describe74",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe74.it75",
    "access": null,
    "description": "accepts an inspector as an argument",
    "lineNumber": 35
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "spec/reporters/baseSpec.js~describe73.describe74",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe74.it76",
    "access": null,
    "description": "registers a listener for the match event",
    "lineNumber": 39
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "spec/reporters/baseSpec.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe77",
    "access": null,
    "description": "given a match",
    "lineNumber": 44
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "spec/reporters/baseSpec.js~describe73.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe77.it78",
    "access": null,
    "description": "increments the number found",
    "lineNumber": 45
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "spec/reporters/baseSpec.js~describe73.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe77.it79",
    "access": null,
    "description": "invokes _getOutput",
    "lineNumber": 51
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "spec/reporters/baseSpec.js~describe73",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe80",
    "access": null,
    "description": "summary",
    "lineNumber": 62
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "spec/reporters/baseSpec.js~describe73.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe80.it81",
    "access": null,
    "description": "can be printed on inspector end",
    "lineNumber": 63
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "spec/reporters/baseSpec.js~describe73.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe80.it82",
    "access": null,
    "description": "prints the correct results if no matches were found",
    "lineNumber": 69
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "spec/reporters/baseSpec.js~describe73.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/baseSpec.js~describe73.describe80.it83",
    "access": null,
    "description": "prints the correct results if matches were found",
    "lineNumber": 80
  },
  {
    "__docId__": 249,
    "kind": "testFile",
    "name": "spec/reporters/defaultSpec.js",
    "content": "var expect          = require('expect.js');\nvar util            = require('util');\nvar chalk           = require('chalk');\nvar fixtures        = require('../fixtures');\nvar helpers         = require('../helpers');\nvar DefaultReporter = require('../../lib/reporters/default');\nvar Inspector       = require('../../lib/inspector');\n\ndescribe('DefaultReporter', function() {\n  afterEach(function() {\n    helpers.restoreOutput();\n  });\n\n  describe('constructor', function() {\n    it('accepts an inspector as an argument', function() {\n      var inspector = new Inspector(['']);\n      var reporter = new DefaultReporter(inspector);\n      expect(reporter._inspector).to.be(inspector);\n    });\n  });\n\n  it('prints the summary on end', function() {\n    helpers.captureOutput();\n    var inspector = new Inspector([fixtures.intersection], {\n      threshold: 40\n    });\n    var reporter = new DefaultReporter(inspector);\n\n    inspector.run();\n    helpers.restoreOutput();\n\n    expect(helpers.getOutput()).to.be('\\nNo matches found across 1 file\\n');\n  });\n\n  describe('given a match', function() {\n    beforeEach(function() {\n      helpers.captureOutput();\n    });\n\n    it('prints the instances', function() {\n      var inspector = new Inspector([fixtures.intersection], {\n        threshold: 15\n      });\n      var reporter = new DefaultReporter(inspector);\n\n      inspector.removeAllListeners('end');\n      inspector.run();\n      helpers.restoreOutput();\n\n      var expected = `\n------------------------------------------------------------\n\nMatch - 2 instances\n\nspec/fixtures/intersection.js:1,5\nfunction intersectionA(array1, array2) {\n  array1.filter(function(n) {\n    return array2.indexOf(n) != -1;\n  });\n}\n\nspec/fixtures/intersection.js:7,11\nfunction intersectionB(arrayA, arrayB) {\n  arrayA.filter(function(n) {\n    return arrayB.indexOf(n) != -1;\n  });\n}\n`;\n\n      expect(helpers.getOutput()).to.be(expected);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/spec/reporters/defaultSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "spec/reporters/defaultSpec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/reporters/defaultSpec.js~describe84",
    "access": null,
    "description": "DefaultReporter",
    "lineNumber": 9
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "spec/reporters/defaultSpec.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/defaultSpec.js~describe84.describe85",
    "access": null,
    "description": "constructor",
    "lineNumber": 14
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "spec/reporters/defaultSpec.js~describe84.describe85",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/defaultSpec.js~describe84.describe85.it86",
    "access": null,
    "description": "accepts an inspector as an argument",
    "lineNumber": 15
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "spec/reporters/defaultSpec.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/defaultSpec.js~describe84.it87",
    "access": null,
    "description": "prints the summary on end",
    "lineNumber": 22
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "spec/reporters/defaultSpec.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/defaultSpec.js~describe84.describe88",
    "access": null,
    "description": "given a match",
    "lineNumber": 35
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "spec/reporters/defaultSpec.js~describe84.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/defaultSpec.js~describe84.describe88.it89",
    "access": null,
    "description": "prints the instances",
    "lineNumber": 40
  },
  {
    "__docId__": 256,
    "kind": "testFile",
    "name": "spec/reporters/jsonSpec.js",
    "content": "var expect       = require('expect.js');\nvar util         = require('util');\nvar chalk        = require('chalk');\nvar concat       = require('concat-stream')\nvar fixtures     = require('../fixtures');\nvar helpers      = require('../helpers');\nvar JSONReporter = require('../../lib/reporters/json');\nvar Inspector    = require('../../lib/inspector');\n\ndescribe('JSONReporter', function() {\n  afterEach(function() {\n    helpers.restoreOutput();\n  });\n\n  describe('constructor', function() {\n    it('accepts an inspector as an argument', function() {\n      var inspector = new Inspector(['']);\n      var reporter = new JSONReporter(inspector);\n      expect(reporter._inspector).to.be(inspector);\n    });\n  });\n\n  it('prints valid json', function() {\n    var inspector = new Inspector([fixtures.smallLines], {\n      threshold: 1\n    });\n    var reporter = new JSONReporter(inspector);\n\n    helpers.captureOutput();\n    inspector.run();\n    helpers.restoreOutput();\n\n    JSON.parse(helpers.getOutput());\n  });\n\n  describe('given a match', function() {\n    beforeEach(function() {\n      helpers.captureOutput();\n    });\n\n    it('prints the instances and their location', function() {\n      var inspector = new Inspector([fixtures.smallLines], {\n        threshold: 1\n      });\n      var reporter = new JSONReporter(inspector);\n      var matches = helpers.collectMatches(inspector);\n\n      inspector.removeAllListeners('start');\n      inspector.removeAllListeners('end');\n\n      inspector.run();\n      helpers.restoreOutput();\n\n      var parsedOutput = JSON.parse(helpers.getOutput());\n      expect(parsedOutput).to.eql({\n        id: '8ee1b37f99571a8917be385c2924f659762c1349',\n        instances: [\n          {\n            path: 'spec/fixtures/smallLines.js',\n            lines: [1,1],\n            code: 'test = function() { return 1; };'\n          },\n          {\n            path: 'spec/fixtures/smallLines.js',\n            lines: [2,2],\n            code: 'test = function() { return 2; };'\n          },\n          {\n            path: 'spec/fixtures/smallLines.js',\n            lines: [3,3],\n            code: 'test = function() { return 3; };'\n          }\n        ]\n      });\n    });\n  });\n\n  it('can write to a custom stream', function(done) {\n    var inspector = new Inspector([fixtures.smallLines], {\n      threshold: 1\n    });\n    var concatStream = concat(onFinish);\n    var reporter = new JSONReporter(inspector, {\n      writableStream: concatStream\n    });\n    var matches = helpers.collectMatches(inspector);\n\n    inspector.run();\n\n    function onFinish(data) {\n      expect(JSON.parse(data)[0].id).to.be(\n        '8ee1b37f99571a8917be385c2924f659762c1349'\n      );\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/spec/reporters/jsonSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "spec/reporters/jsonSpec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/reporters/jsonSpec.js~describe90",
    "access": null,
    "description": "JSONReporter",
    "lineNumber": 10
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "spec/reporters/jsonSpec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/jsonSpec.js~describe90.describe91",
    "access": null,
    "description": "constructor",
    "lineNumber": 15
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "spec/reporters/jsonSpec.js~describe90.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/jsonSpec.js~describe90.describe91.it92",
    "access": null,
    "description": "accepts an inspector as an argument",
    "lineNumber": 16
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "spec/reporters/jsonSpec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/jsonSpec.js~describe90.it93",
    "access": null,
    "description": "prints valid json",
    "lineNumber": 23
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "describe94",
    "testId": 94,
    "memberof": "spec/reporters/jsonSpec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/jsonSpec.js~describe90.describe94",
    "access": null,
    "description": "given a match",
    "lineNumber": 36
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "spec/reporters/jsonSpec.js~describe90.describe94",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/jsonSpec.js~describe90.describe94.it95",
    "access": null,
    "description": "prints the instances and their location",
    "lineNumber": 41
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "spec/reporters/jsonSpec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/jsonSpec.js~describe90.it96",
    "access": null,
    "description": "can write to a custom stream",
    "lineNumber": 78
  },
  {
    "__docId__": 264,
    "kind": "testFile",
    "name": "spec/reporters/pmdSpec.js",
    "content": "var expect      = require('expect.js');\nvar util        = require('util');\nvar chalk       = require('chalk');\nvar fixtures    = require('../fixtures');\nvar helpers     = require('../helpers');\nvar PMDReporter = require('../../lib/reporters/pmd');\nvar Inspector   = require('../../lib/inspector');\n\ndescribe('PMDReporter', function() {\n  afterEach(function() {\n    helpers.restoreOutput();\n  });\n\n  describe('constructor', function() {\n    it('accepts an inspector as an argument', function() {\n      var inspector, reporter;\n\n      inspector = new Inspector(['']);\n      reporter = new PMDReporter(inspector);\n      expect(reporter._inspector).to.be(inspector);\n    });\n  });\n\n  describe('given a match', function() {\n    beforeEach(function() {\n      helpers.captureOutput();\n    });\n\n    it('prints paths and line numbers in a duplication element', function() {\n      var inspector, reporter, matches;\n\n      inspector = new Inspector([fixtures.smallLines], {threshold: 1});\n      reporter = new PMDReporter(inspector);\n      matches = helpers.collectMatches(inspector);\n\n      inspector.removeAllListeners('start');\n      inspector.removeAllListeners('end');\n\n      inspector.run();\n      helpers.restoreOutput();\n\n      var expected = helpers.trimlines(\n        `<duplication lines=\"3\" id=\"${matches[0].hash}\">\n        <file path=\"${fixtures.smallLines}\" line=\"1\"/>\n        <file path=\"${fixtures.smallLines}\" line=\"2\"/>\n        <file path=\"${fixtures.smallLines}\" line=\"3\"/>\n        <codefragment>\n        spec/fixtures/smallLines.js:1,1\n        test = function() { return 1; };\n\n        spec/fixtures/smallLines.js:2,2\n        test = function() { return 2; };\n\n        spec/fixtures/smallLines.js:3,3\n        test = function() { return 3; };\n        </codefragment>\n        </duplication>\n      `);\n\n      expect(helpers.getOutput()).to.eql(expected);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/paul/code/src/github.com/paulvollmer/jsinspect/spec/reporters/pmdSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "spec/reporters/pmdSpec.js",
    "testDepth": 0,
    "static": true,
    "longname": "spec/reporters/pmdSpec.js~describe97",
    "access": null,
    "description": "PMDReporter",
    "lineNumber": 9
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "describe98",
    "testId": 98,
    "memberof": "spec/reporters/pmdSpec.js~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/pmdSpec.js~describe97.describe98",
    "access": null,
    "description": "constructor",
    "lineNumber": 14
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "spec/reporters/pmdSpec.js~describe97.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/pmdSpec.js~describe97.describe98.it99",
    "access": null,
    "description": "accepts an inspector as an argument",
    "lineNumber": 15
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "describe100",
    "testId": 100,
    "memberof": "spec/reporters/pmdSpec.js~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "spec/reporters/pmdSpec.js~describe97.describe100",
    "access": null,
    "description": "given a match",
    "lineNumber": 24
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "spec/reporters/pmdSpec.js~describe97.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "spec/reporters/pmdSpec.js~describe97.describe100.it101",
    "access": null,
    "description": "prints paths and line numbers in a duplication element",
    "lineNumber": 29
  }
]